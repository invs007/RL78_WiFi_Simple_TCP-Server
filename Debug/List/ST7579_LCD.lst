###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.5.50715 for RL78             05/Aug/2014  14:51:12 #
# Copyright 2011-2013 IAR Systems AB.                                         #
# Evaluation license - IAR Embedded Workbench for Renesas RL78, Evaluation version 1.30 #
#                                                                             #
#    Core         =  rl78_2                                                   #
#    Code model   =  Near                                                     #
#    Data model   =  Near                                                     #
#                 =                                                           #
#    Source file  =  D:\NCSU\Research Work\Summer                             #
#                    2014\GainSpan-WiFi\WiFi_Demo\SerialDemo-G14_SPI\SerialDe #
#                    mo-G14 - Copy\Glyph\Drivers\ST7579_LCD.c                 #
#    Command line =  "D:\NCSU\Research Work\Summer                            #
#                    2014\GainSpan-WiFi\WiFi_Demo\SerialDemo-G14_SPI\SerialDe #
#                    mo-G14 - Copy\Glyph\Drivers\ST7579_LCD.c" --core rl78_2  #
#                    --code_model near --data_model near                      #
#                    --near_const_location rom0 -o "D:\NCSU\Research          #
#                    Work\Summer 2014\GainSpan-WiFi\WiFi_Demo\SerialDemo-G14_ #
#                    SPI\SerialDemo-G14 - Copy\Debug\Obj\" --dlib_config      #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.5\rl78\LIB\dlrl78nn2n.h" -e -Ohz --no_scheduling       #
#                    --debug -lCN "D:\NCSU\Research Work\Summer               #
#                    2014\GainSpan-WiFi\WiFi_Demo\SerialDemo-G14_SPI\SerialDe #
#                    mo-G14 - Copy\Debug\List\" -I "D:\NCSU\Research          #
#                    Work\Summer 2014\GainSpan-WiFi\WiFi_Demo\SerialDemo-G14_ #
#                    SPI\SerialDemo-G14 - Copy/applilet3_src/\" -I            #
#                    "D:\NCSU\Research Work\Summer                            #
#                    2014\GainSpan-WiFi\WiFi_Demo\SerialDemo-G14_SPI\SerialDe #
#                    mo-G14 - Copy/Glyph/\" -I "D:\NCSU\Research Work\Summer  #
#                    2014\GainSpan-WiFi\WiFi_Demo\SerialDemo-G14_SPI\SerialDe #
#                    mo-G14 - Copy/Glyph/Drivers/\" -I "D:\NCSU\Research      #
#                    Work\Summer 2014\GainSpan-WiFi\WiFi_Demo\SerialDemo-G14_ #
#                    SPI\SerialDemo-G14 - Copy/user_include/\"                #
#    List file    =  D:\NCSU\Research Work\Summer                             #
#                    2014\GainSpan-WiFi\WiFi_Demo\SerialDemo-G14_SPI\SerialDe #
#                    mo-G14 - Copy\Debug\List\ST7579_LCD.lst                  #
#    Object file  =  D:\NCSU\Research Work\Summer                             #
#                    2014\GainSpan-WiFi\WiFi_Demo\SerialDemo-G14_SPI\SerialDe #
#                    mo-G14 - Copy\Debug\Obj\ST7579_LCD.r87                   #
#                                                                             #
#                                                                             #
###############################################################################

D:\NCSU\Research Work\Summer 2014\GainSpan-WiFi\WiFi_Demo\SerialDemo-G14_SPI\SerialDemo-G14 - Copy\Glyph\Drivers\ST7579_LCD.c
      1          /******************************************************************************
      2          * DISCLAIMER
      3          * This software is supplied by Renesas Electronics Corporation and is only
      4          * intended for use with Renesas products. No other uses are authorized.
      5          * This software is owned by Renesas Electronics Corporation and is protected under
      6          * all applicable laws, including copyright laws.
      7          * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES
      8          * REGARDING THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY,
      9          * INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
     10          * PARTICULAR PURPOSE AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY
     11          * DISCLAIMED.
     12          * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS
     13          * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE
     14          * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES
     15          * FOR ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS
     16          * AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
     17          * Renesas reserves the right, without notice, to make changes to this
     18          * software and to discontinue the availability of this software.
     19          * By using this software, you agree to the additional terms and
     20          * conditions found by accessing the following link:
     21          * http://www.renesas.com/disclaimer
     22          ******************************************************************************/
     23          /* Copyright (C) 2010 Renesas Electronics Corporation. All rights reserved. */
     24          /* Code written for Renesas by Future Designs, Inc. www.teamfdi.com */
     25          
     26          /******************************************************************************
     27          * File Name : ST7579_LCD.c
     28          * Version : 1.00
     29          * Device(s) : ST7579 LCD Controller
     30          * Tool-Chain : Glyph - The Generic API for Graphics LCD API version 1.00
     31          * H/W Platform : RX62N Group
     32          * Description : A collection of functions used to operate an OKAYA 96x64
     33          *               LCD display with the ST7579 controller chip.
     34          *               (Okaya Graphic LCD P/N  SE9664WRF-004-I02Q uses ST7579 driver IC)
     35          * Communications Required: 3-Wire SPI with a 4th Wire independent
     36          *                          Transmit Only
     37          ******************************************************************************
     38          * History :
     39          * : 21.07.2010 1.00 First Release
     40          ******************************************************************************/
     41          
     42          /******************************************************************************
     43          Includes “ST7579 Includes”
     44          ******************************************************************************/
     45          #include "ST7579_LCD.h"
     46          #include "glyph_api.h"
     47          #include "lcd.h"
     48          
     49          /******************************************************************************
     50          * ID : 30.0
     51          * Outline : ST7579_Open
     52          * Include : ST7579_LCD.h
     53          * Function Name: ST7579_Open
     54          * Description : Assign values to the handle variables and configure LCD.
     55          * Argument : aHandle - the Glyph handle to setup for the LCD.
     56          *          : aAddress - may be used for some communications.
     57          * Return Value : 0=success, not 0= error
     58          * Calling Functions : GlyphOpen
     59          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
     60          T_glyphError ST7579_Open(T_glyphHandle aHandle, uint16_t aAddress)
   \                     ST7579_Open:
     61          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001                       ; Auto size: 0
   \   000001 16                    MOVW      HL, AX             ;; 1 cycle
     62              T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
     63          
     64              p_gw->iLCDAPI->iAddress = aAddress;
   \   000002 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000003 14                    MOVW      DE, AX             ;; 1 cycle
   \   000004 13                    MOVW      AX, BC             ;; 1 cycle
   \   000005 BA16                  MOVW      [DE+0x16], AX      ;; 1 cycle
     65          
     66              p_gw->iLCDAPI->iFont = USE_DEFAULT_FONT ;
   \   000007 32....                MOVW      BC, #Font8x8_table  ;; 1 cycle
   \   00000A AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00000B 14                    MOVW      DE, AX             ;; 1 cycle
   \   00000C 13                    MOVW      AX, BC             ;; 1 cycle
   \   00000D B9                    MOVW      [DE], AX           ;; 1 cycle
     67          
     68              /* FP_STATUS */
     69              p_gw->iLCDAPI->iStatusRegister = 0x01 ;
   \   00000E AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00000F 14                    MOVW      DE, AX             ;; 1 cycle
   \   000010 E6                    ONEW      AX                 ;; 1 cycle
   \   000011 BA14                  MOVW      [DE+0x14], AX      ;; 1 cycle
     70          
     71              p_gw->iLCDAPI->iFP_API_MAJOR_VERSION = 0x01 ;
   \   000013 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000014 14                    MOVW      DE, AX             ;; 1 cycle
   \   000015 E1                    ONEB      A                  ;; 1 cycle
   \   000016 9A0B                  MOV       [DE+0x0B], A       ;; 1 cycle
     72              p_gw->iLCDAPI->iFP_API_MINOR_VERSION = 0x00 ;
   \   000018 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000019 14                    MOVW      DE, AX             ;; 1 cycle
   \   00001A F1                    CLRB      A                  ;; 1 cycle
   \   00001B 9A0C                  MOV       [DE+0x0C], A       ;; 1 cycle
     73              p_gw->iLCDAPI->iFP_IMPLEMENTATION_ID = 0x01 ;
   \   00001D AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00001E 14                    MOVW      DE, AX             ;; 1 cycle
   \   00001F E1                    ONEB      A                  ;; 1 cycle
   \   000020 9A0D                  MOV       [DE+0x0D], A       ;; 1 cycle
     74              p_gw->iLCDAPI->iFP_IMPL_MAJOR_VERSION = VERSION_MAJOR ;
   \   000022 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000023 14                    MOVW      DE, AX             ;; 1 cycle
   \   000024 E1                    ONEB      A                  ;; 1 cycle
   \   000025 9A0E                  MOV       [DE+0x0E], A       ;; 1 cycle
     75              p_gw->iLCDAPI->iFP_IMPL_MINOR_VERSION = VERSION_MINOR ;
   \   000027 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000028 14                    MOVW      DE, AX             ;; 1 cycle
   \   000029 F1                    CLRB      A                  ;; 1 cycle
   \   00002A 9A0F                  MOV       [DE+0x0F], A       ;; 1 cycle
     76              p_gw->iLCDAPI->iMAX_HEIGHT = 64 ;
   \   00002C AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00002D 14                    MOVW      DE, AX             ;; 1 cycle
   \   00002E 304000                MOVW      AX, #0x40          ;; 1 cycle
   \   000031 BA10                  MOVW      [DE+0x10], AX      ;; 1 cycle
     77              p_gw->iLCDAPI->iMAX_WIDTH = 96 ;
   \   000033 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000034 14                    MOVW      DE, AX             ;; 1 cycle
   \   000035 306000                MOVW      AX, #0x60          ;; 1 cycle
   \   000038 BA12                  MOVW      [DE+0x12], AX      ;; 1 cycle
     78                      
     79              /* Set Default Contrast */
     80              p_gw->iLCDAPI->iContrast = 95 ;
   \   00003A AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00003B 14                    MOVW      DE, AX             ;; 1 cycle
   \   00003C 515F                  MOV       A, #0x5F           ;; 1 cycle
   \   00003E 9A18                  MOV       [DE+0x18], A       ;; 1 cycle
     81              p_gw->iLCDAPI->iContrastBoost = 5 ;
   \   000040 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000041 14                    MOVW      DE, AX             ;; 1 cycle
   \   000042 5105                  MOV       A, #0x5            ;; 1 cycle
   \   000044 9A19                  MOV       [DE+0x19], A       ;; 1 cycle
     82              p_gw->iLCDAPI->iFrameRate = 137 ;
   \   000046 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000047 14                    MOVW      DE, AX             ;; 1 cycle
   \   000048 5189                  MOV       A, #0x89           ;; 1 cycle
   \   00004A 9A1A                  MOV       [DE+0x1A], A       ;; 1 cycle
     83              
     84              /* Turn on the LCD commands */
     85              ST7579_Config(aHandle) ;
   \   00004C 17                    MOVW      AX, HL             ;; 1 cycle
   \   00004D FD....                CALL      ST7579_Config      ;; 3 cycles
     86          
     87              return GLYPH_ERROR_NONE ;
   \   000050 F1                    CLRB      A                  ;; 1 cycle
   \   000051 C4                    POP       DE                 ;; 1 cycle
   \   000052 D7                    RET                          ;; 6 cycles
   \   000053                       ; ------------------------------------- Block: 67 cycles
   \   000053                       ; ------------------------------------- Total: 67 cycles
   \   000053                       REQUIRE ?CLRL78_V1_0_L00
     88          }
     89          
     90          /******************************************************************************
     91          * ID : 30.2
     92          * Outline : ST7579_Close
     93          * Include : ST7579_LCD.h
     94          * Function Name: ST7579_Close
     95          * Description : Clear all settings in the global ST7579_LCD.
     96          * Argument : aHandle - the Glyph handle to setup for the LCD and Communications.
     97          * Return Value : 0=success, not 0= error
     98          * Calling Functions : GlyphOpen
     99          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    100          T_glyphError ST7579_Close(T_glyphHandle aHandle)
   \                     ST7579_Close:
    101          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
    102              return GLYPH_ERROR_NONE ;
   \   000000 F1                    CLRB      A                  ;; 1 cycle
   \   000001 D7                    RET                          ;; 6 cycles
   \   000002                       ; ------------------------------------- Block: 7 cycles
   \   000002                       ; ------------------------------------- Total: 7 cycles
   \   000002                       REQUIRE ?CLRL78_V1_0_L00
    103          }
    104          
    105          /******************************************************************************
    106          * ID : 31.0
    107          * Outline : ST7579_Write
    108          * Include : ST7579_LCD.h
    109          * Function Name: ST7579_Write
    110          * Description : Write to the LCD using a Glyph Register value, to the Glyph
    111          * data storage or run an LCD Glyph Command.
    112          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    113          *          : aRegister - specifies what to do.
    114          *          : aValue - data if required
    115          * Return Value : 0=success, not 0= error
    116          * Calling Functions : GlyphWrite
    117          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    118          T_glyphError ST7579_Write(T_glyphHandle aHandle, uint16_t aRegister, uint16_t aValue)
   \                     ST7579_Write:
    119          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C1                    PUSH      AX                 ;; 1 cycle
   \   000001 C3                    PUSH      BC                 ;; 1 cycle
   \   000002                       ; Auto size: 12
   \   000002 2008                  SUBW      SP, #0x8           ;; 1 cycle
    120              uint16_t pCounter;
    121              uint16_t column;
    122              uint16_t line;
    123              const uint8_t *p_char;
    124              uint8_t width;
    125              uint8_t height;
    126              const uint8_t *p_charData;
    127              uint16_t page;
    128              T_glyphError error = GLYPH_ERROR_ILLEGAL_OPERATION ;
   \   000004 E3                    ONEB      B                  ;; 1 cycle
    129              T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
    130              uint8_t cmd = 0xFF;
   \   000005 51FF                  MOV       A, #0xFF           ;; 1 cycle
   \   000007 9804                  MOV       [SP+0x04], A       ;; 1 cycle
    131          
    132              p_gw->iLCDAPI->iStatusRegister = GLYPH_STATUS_BUSY ;
   \   000009 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   00000B FD....                CALL      N:?Subroutine7     ;; 3 cycles
   \   00000E                       ; ------------------------------------- Block: 10 cycles
    133          
    134              switch (aRegister) {
   \                     ??CrossCallReturnLabel_16:
   \   00000E A808                  MOVW      AX, [SP+0x08]      ;; 1 cycle
   \   000010 36....                MOVW      HL, #LWRD(??ST7579_Write_0)  ;; 1 cycle
   \   000013 41..                  MOV       ES, #BYTE3(??ST7579_Write_0)  ;; 1 cycle
   \   000015 CEFC..                MOV       CS, #BYTE3(ST7579_Write)  ;; 1 cycle
   \   000018 ED....                BR        N:?I_SSWITCH_L10   ;; 3 cycles
   \   00001B                       ; ------------------------------------- Block: 7 cycles
    135                  case GLYPH_CHAR_X:
    136                      p_gw->iLCDAPI->iCharX_Position = aValue ;
   \                     ??ST7579_Write_1:
   \   00001B A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   00001D 16                    MOVW      HL, AX             ;; 1 cycle
   \   00001E AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00001F 16                    MOVW      HL, AX             ;; 1 cycle
   \   000020 15                    MOVW      AX, DE             ;; 1 cycle
   \   000021 BC02                  MOVW      [HL+0x02], AX      ;; 1 cycle
   \   000023                       ; ------------------------------------- Block: 6 cycles
    137                      error = GLYPH_ERROR_NONE ;
    138                      break ;
    139                  case GLYPH_CHAR_Y:
    140                      p_gw->iLCDAPI->iCharY_Position = aValue ;
    141                      error = GLYPH_ERROR_NONE ;
    142                      break ;
    143                  case GLYPH_FONT:
    144                      p_gw->iLCDAPI->iCharFont = aValue;
    145                      switch (aValue) {
    146                      #ifdef USE_GLYPH_FONT_BITMAP
    147                          case GLYPH_FONT_BITMAP:
    148                              p_gw->iLCDAPI->iFont = Bitmaps_table ;
    149                              break ;
    150                      #endif
    151                      #ifdef USE_GLYPH_FONT_HELVR10
    152                          case GLYPH_FONT_HELVR10:
    153                              p_gw->iLCDAPI->iFont = FontHelvr10_table ;
    154                              break ;
    155                      #endif
    156                      #ifdef USE_GLYPH_FONT_8_BY_16
    157                          case GLYPH_FONT_8_BY_16:
    158                              p_gw->iLCDAPI->iFont = Font8x16_table ;
    159                              break ;
    160                      #endif
    161                      #ifdef USE_GLYPH_FONT_8_BY_8
    162                          case GLYPH_FONT_8_BY_8:
    163                              p_gw->iLCDAPI->iFont = Font8x8_table ;
    164                              break ;
    165                      #endif
    166                      #ifdef USE_GLYPH_FONT_WINFREE
    167                          case GLYPH_FONT_WINFREESYSTEM14_BY_16:
    168                              p_gw->iLCDAPI->iFont = FontWinFreeSystem14x16_table ;
    169                              break ;
    170                      #endif
    171                      #ifdef USE_GLYPH_FONT_5_BY_7
    172                          case GLYPH_FONT_5_BY_7:
    173                              p_gw->iLCDAPI->iFont = Fontx5x7_table ;
    174                              break ;
    175                      #endif
    176                      #ifdef USE_GLYPH_FONT_6_BY_13
    177                          case GLYPH_FONT_6_BY_13:
    178                              p_gw->iLCDAPI->iFont = Fontx6x13_table ;
    179                              break ;
    180                      #endif
    181          			#ifdef USE_GLYPH_FONT_LOGOS
    182                          case GLYPH_FONT_LOGOS:
    183                              p_gw->iLCDAPI->iFont = Logos_table ;
    184                              break ;
    185                      #endif
    186                      }
    187                      error = GLYPH_ERROR_NONE ;
    188                      break ;
    189                  case GLYPH_DRAW_CMD:
    190                      switch (aValue)  {
    191                          case 1:
    192                              ST7579_SetLine(p_gw, 0);
    193                              for (pCounter=0;pCounter<8;pCounter++)  {
    194                                  ST7579_SetPage(aHandle, pCounter);
    195                                  ST7579_SetChar(aHandle, 0);
    196                                  for (column=0; column<128; column++)    {
    197                                      p_gw->iCommAPI->iDataSend(0x00);
    198                                  }
    199                              }
    200                              ST7579_SetPage(aHandle, 0);
    201                              ST7579_SetChar(aHandle, 0);
    202                              break;
    203                          case 2:
    204                              /* use reverse video to detect pixel changes */
    205                              ST7579_Send16bitsCommand(aHandle, LCD_DISPLAY_REVERSE);
    206                              break;
    207                          case 3:
    208                              /* use normal video to detect pixel changes */
    209                              ST7579_Send16bitsCommand(aHandle, LCD_DISPLAY_NORMAL);
    210                              break;
    211                          case 6:
    212                              for (pCounter=0;pCounter<8;pCounter++)  {
    213                                  ST7579_SetLine(aHandle, 0);
    214                                  ST7579_SetChar(aHandle, 0);              
    215                                  ST7579_SetPage(aHandle, pCounter);
    216                                  for (column=0;column<16;column++)   {
    217                                      p_gw->iCommAPI->iDataSend(0xFF);
    218                                      p_gw->iCommAPI->iDataSend(0x01);
    219                                      p_gw->iCommAPI->iDataSend(0x01);
    220                                      p_gw->iCommAPI->iDataSend(0x01);
    221                                      p_gw->iCommAPI->iDataSend(0x01);
    222                                      p_gw->iCommAPI->iDataSend(0x01);
    223                                      p_gw->iCommAPI->iDataSend(0x01);
    224                                      p_gw->iCommAPI->iDataSend(0x01);
    225                                  }
    226                              }                                       
    227                              break;
    228                              
    229                          case 7: // Draw block
    230                              line = p_gw->iLCDAPI->iCharY_Position - (p_gw->iLCDAPI->iCharY_Position % 8);   // Gets the nearest block boundary
    231                              cmd = 0xFF;
    232                              
    233                              if (p_gw->iLCDAPI->iCharY_Position < (line + 8))
    234                                      cmd &= (0xFF << (p_gw->iLCDAPI->iCharY_Position - line));
    235                              
    236                              for ( ; line<=p_gw->iLCDAPI->iCharY2_Position; line+=8) {
    237                                  
    238                                  ST7579_SetPage(aHandle, line/8);
    239                                  ST7579_SetChar(aHandle, p_gw->iLCDAPI->iCharX_Position);
    240                                 
    241                                  if ((line+8) > p_gw->iLCDAPI->iCharY2_Position) /* If we're ending midway through a line */
    242                                      cmd &= (0xFF >> ((line+7) - p_gw->iLCDAPI->iCharY2_Position));
    243                                  
    244                                  /* This code fills in the row column by column, one px at a time */
    245                                  for (column=p_gw->iLCDAPI->iCharX_Position; column<=p_gw->iLCDAPI->iCharX2_Position; column++)    {
    246                                      p_gw->iCommAPI->iDataSend(cmd); // No_Clobber_Axes(cmd, column, line));
    247                                  }
    248                                  
    249                                  cmd = 0xFF;
    250                              }
    251                              break;
    252                              
    253                          case 8: // Erase block
    254                              line = p_gw->iLCDAPI->iCharY_Position - (p_gw->iLCDAPI->iCharY_Position % 8);
    255                              cmd = 0x00;
    256                              
    257                              if (p_gw->iLCDAPI->iCharY_Position < (line + 8))
    258                                      cmd &= (0xFF << (p_gw->iLCDAPI->iCharY_Position - line));
    259                              
    260                              for ( ; line<=p_gw->iLCDAPI->iCharY2_Position; line+=8) {
    261                                  ST7579_SetPage(aHandle, line/8);
    262                                  ST7579_SetChar(aHandle, p_gw->iLCDAPI->iCharX_Position);
    263                                  for (column=p_gw->iLCDAPI->iCharX_Position; column<=p_gw->iLCDAPI->iCharX2_Position; column++)    {
    264                                      p_gw->iCommAPI->iDataSend(cmd); // No_Clobber_Axes(cmd, column, line));
    265                                  }
    266                              }
    267                              break;
    268                      }
    269                      error = GLYPH_ERROR_NONE ;
   \                     ??ST7579_Write_2:
   \   000023 F3                    CLRB      B                  ;; 1 cycle
    270                      break ;
   \   000024                       ; ------------------------------------- Block: 1 cycles
    271                  case GLYPH_DRAW_CHAR:
    272                      p_char = p_gw->iLCDAPI->iFont[aValue];
    273                      width = p_char[0];
    274                      height = p_char[1];
    275                      p_charData = &p_char[2];
    276                      for (page=0; page<height; page+=8)  {
    277                          ST7579_SetPage(aHandle, (p_gw->iLCDAPI->iCharY_Position+page)>>3);
    278                          ST7579_SetChar(aHandle, p_gw->iLCDAPI->iCharX_Position);
    279                          for (column=0; column<width; column++, p_charData++)    {
    280                              p_gw->iCommAPI->iDataSend(*p_charData);
    281                          }
    282                      }
    283          						p_gw->iLCDAPI->iCharX_Position += width;
    284                      error = GLYPH_ERROR_NONE ;
    285                      break ;
    286                  case GLYPH_CHAR_ERASE:
    287                      p_char = p_gw->iLCDAPI->iFont[aValue];
    288                      width = p_char[0];
    289                      height = p_char[1];
    290                      for (page=0; page<height; page+=8)  {
    291                          ST7579_SetPage(aHandle, (p_gw->iLCDAPI->iCharY_Position+page)>>3);
    292                          ST7579_SetChar(aHandle, p_gw->iLCDAPI->iCharX_Position);
    293                          for (column=0; column<width; column++, p_charData++)    {
    294                              p_gw->iCommAPI->iDataSend(0x00);
    295                          }
    296                      }
    297          						p_gw->iLCDAPI->iCharX_Position += width;
    298                      error = GLYPH_ERROR_NONE ;
    299                      break ;
    300                  case GLYPH_INVERT_CHAR:
    301                      p_char = (uint8_t *)p_gw->iLCDAPI->iFont[aValue];
    302                      width = p_char[0];
    303                      height = p_char[1];
    304                      p_charData = &p_char[2];
    305                      for (page=0; page<height; page+=8)  {
    306                          ST7579_SetPage(aHandle, (p_gw->iLCDAPI->iCharY_Position+page)>>3);
    307                          ST7579_SetChar(aHandle, p_gw->iLCDAPI->iCharX_Position);
    308                          for (column=0; column<width; column++, p_charData++)    {
    309          									// Output the inverted values to invert character
    310                              p_gw->iCommAPI->iDataSend(*p_charData ^ 0xFF);
    311                          }
    312                      }
    313          						p_gw->iLCDAPI->iCharX_Position += width;
    314                      error = GLYPH_ERROR_NONE;
    315                      break;
    316                  case GLYPH_CHAR_X2:
    317                      p_gw->iLCDAPI->iCharX2_Position = aValue ;
    318                      error = GLYPH_ERROR_NONE ;
    319                      break ;
    320                  case GLYPH_CHAR_Y2:
    321                      p_gw->iLCDAPI->iCharY2_Position = aValue ;
    322                      error = GLYPH_ERROR_NONE ;
    323                      break ;
    324                  case GLYPH_FRAME_RATE:
    325                      p_gw->iLCDAPI->iFrameRate = (int8_t)aValue ;
    326                      ST7579_SetFrameRate(aHandle, p_gw->iLCDAPI->iFrameRate) ;
    327                      error = GLYPH_ERROR_NONE ;
    328                      break ;
    329                  case GLYPH_CONTRAST:
    330                      p_gw->iLCDAPI->iContrast = (int8_t)aValue ;
    331                      ST7579_SetVO_Range(aHandle, p_gw->iLCDAPI->iContrast) ;
    332                      error = GLYPH_ERROR_NONE ;
    333                      break ;
    334                  case GLYPH_CONTRAST_BOOST:
    335                      p_gw->iLCDAPI->iContrastBoost = (int8_t)aValue ;
    336                      ST7579_SetSystemBiasBooster(aHandle, p_gw->iLCDAPI->iContrastBoost) ;
    337                      error = GLYPH_ERROR_NONE ;
    338                      break ;
    339              }
    340          
    341              p_gw->iLCDAPI->iStatusRegister = GLYPH_STATUS_READY ;
   \                     ??ST7579_Write_3:
   \   000024 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   000026 16                    MOVW      HL, AX             ;; 1 cycle
   \   000027 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000028 16                    MOVW      HL, AX             ;; 1 cycle
   \   000029 F6                    CLRW      AX                 ;; 1 cycle
   \   00002A BC14                  MOVW      [HL+0x14], AX      ;; 1 cycle
    342              return error ;
   \   00002C 63                    MOV       A, B               ;; 1 cycle
   \   00002D 100C                  ADDW      SP, #0xC           ;; 1 cycle
   \   00002F D7                    RET                          ;; 6 cycles
   \   000030                       ; ------------------------------------- Block: 14 cycles
   \                     ??ST7579_Write_4:
   \   000030 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   000032 16                    MOVW      HL, AX             ;; 1 cycle
   \   000033 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000034 16                    MOVW      HL, AX             ;; 1 cycle
   \   000035 15                    MOVW      AX, DE             ;; 1 cycle
   \   000036 BC04                  MOVW      [HL+0x04], AX      ;; 1 cycle
   \   000038 EFE9                  BR        S:??ST7579_Write_2  ;; 3 cycles
   \   00003A                       ; ------------------------------------- Block: 9 cycles
   \                     ??ST7579_Write_5:
   \   00003A 64                    MOV       A, E               ;; 1 cycle
   \   00003B 16                    MOVW      HL, AX             ;; 1 cycle
   \   00003C A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   00003E 37                    XCHW      AX, HL             ;; 1 cycle
   \   00003F 12                    MOVW      BC, AX             ;; 1 cycle
   \   000040 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000041 33                    XCHW      AX, BC             ;; 1 cycle
   \   000042 C3                    PUSH      BC                 ;; 1 cycle
   \   000043 C6                    POP       HL                 ;; 1 cycle
   \   000044 9C0A                  MOV       [HL+0x0A], A       ;; 1 cycle
   \   000046 15                    MOVW      AX, DE             ;; 1 cycle
   \   000047 240000                SUBW      AX, #0x0           ;; 1 cycle
   \   00004A DD07                  BZ        ??ST7579_SetLine_0  ;; 4 cycles
   \   00004C                       ; ------------------------------------- Block: 16 cycles
   \   00004C 240200                SUBW      AX, #0x2           ;; 1 cycle
   \   00004F DD0E                  BZ        ??ST7579_SetLine_1  ;; 4 cycles
   \   000051                       ; ------------------------------------- Block: 5 cycles
   \   000051 EFD0                  BR        S:??ST7579_Write_2  ;; 3 cycles
   \   000053                       ; ------------------------------------- Block: 3 cycles
   \                     ??ST7579_SetLine_0:
   \   000053 34....                MOVW      DE, #Font8x8_table  ;; 1 cycle
   \   000056                       ; ------------------------------------- Block: 1 cycles
   \                     ??ST7579_Write_6:
   \   000056 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   000058 16                    MOVW      HL, AX             ;; 1 cycle
   \   000059 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00005A 16                    MOVW      HL, AX             ;; 1 cycle
   \   00005B 15                    MOVW      AX, DE             ;; 1 cycle
   \   00005C BB                    MOVW      [HL], AX           ;; 1 cycle
   \   00005D EFC4                  BR        S:??ST7579_Write_2  ;; 3 cycles
   \   00005F                       ; ------------------------------------- Block: 9 cycles
   \                     ??ST7579_SetLine_1:
   \   00005F 34....                MOVW      DE, #Fontx5x7_table  ;; 1 cycle
   \   000062 EFF2                  BR        S:??ST7579_Write_6  ;; 3 cycles
   \   000064                       ; ------------------------------------- Block: 4 cycles
   \                     ??ST7579_Write_7:
   \   000064 15                    MOVW      AX, DE             ;; 1 cycle
   \   000065 240100                SUBW      AX, #0x1           ;; 1 cycle
   \   000068 DD21                  BZ        ??ST7579_SetLine_2  ;; 4 cycles
   \   00006A                       ; ------------------------------------- Block: 6 cycles
   \   00006A 240100                SUBW      AX, #0x1           ;; 1 cycle
   \   00006D DD66                  BZ        ??ST7579_SetLine_3  ;; 4 cycles
   \   00006F                       ; ------------------------------------- Block: 5 cycles
   \   00006F 240100                SUBW      AX, #0x1           ;; 1 cycle
   \   000072 DD6C                  BZ        ??ST7579_SetLine_4  ;; 4 cycles
   \   000074                       ; ------------------------------------- Block: 5 cycles
   \   000074 240300                SUBW      AX, #0x3           ;; 1 cycle
   \   000077 DD6C                  BZ        ??ST7579_SetLine_5  ;; 4 cycles
   \   000079                       ; ------------------------------------- Block: 5 cycles
   \   000079 240100                SUBW      AX, #0x1           ;; 1 cycle
   \   00007C 61F8                  SKNZ                         ;; 4 cycles
   \   00007E ED....                BR        N:??ST7579_SetLine_6  ;; 4 cycles
   \   000081                       ; ------------------------------------- Block: 5 cycles
   \   000081 240100                SUBW      AX, #0x1           ;; 1 cycle
   \   000084 61F8                  SKNZ                         ;; 4 cycles
   \   000086 ED....                BR        N:??ST7579_SetLine_7  ;; 4 cycles
   \   000089                       ; ------------------------------------- Block: 5 cycles
   \   000089 EF98                  BR        S:??ST7579_Write_2  ;; 3 cycles
   \   00008B                       ; ------------------------------------- Block: 3 cycles
   \                     ??ST7579_SetLine_2:
   \   00008B F3                    CLRB      B                  ;; 1 cycle
   \   00008C A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   00008E FD....                CALL      ST7579_SetLine     ;; 3 cycles
   \   000091 F6                    CLRW      AX                 ;; 1 cycle
   \   000092 B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
   \   000094 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   000096 A1                    INCW      AX                 ;; 1 cycle
   \   000097 A1                    INCW      AX                 ;; 1 cycle
   \   000098 B800                  MOVW      [SP], AX           ;; 1 cycle
   \   00009A                       ; ------------------------------------- Block: 11 cycles
   \                     ??ST7579_Write_8:
   \   00009A A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00009C 60                    MOV       A, X               ;; 1 cycle
   \   00009D 73                    MOV       B, A               ;; 1 cycle
   \   00009E A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   0000A0 FD....                CALL      ST7579_SetPage     ;; 3 cycles
   \   0000A3 F3                    CLRB      B                  ;; 1 cycle
   \   0000A4 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   0000A6 FD....                CALL      ST7579_SetChar     ;; 3 cycles
   \   0000A9 5380                  MOV       B, #0x80           ;; 1 cycle
   \   0000AB                       ; ------------------------------------- Block: 13 cycles
   \                     ??ST7579_Write_9:
   \   0000AB F1                    CLRB      A                  ;; 1 cycle
   \   0000AC 16                    MOVW      HL, AX             ;; 1 cycle
   \   0000AD A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   0000AF FD....                CALL      N:?Subroutine12    ;; 3 cycles
   \   0000B2                       ; ------------------------------------- Block: 6 cycles
   \                     ??CrossCallReturnLabel_29:
   \   0000B2 C5                    PUSH      DE                 ;; 1 cycle
   \   0000B3 C6                    POP       HL                 ;; 1 cycle
   \   0000B4 FD....                CALL      N:?Subroutine8     ;; 3 cycles
   \   0000B7                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_49:
   \   0000B7 61EA                  CALL      DE                 ;; 3 cycles
   \   0000B9 93                    DEC       B                  ;; 1 cycle
   \   0000BA DFEF                  BNZ       ??ST7579_Write_9   ;; 4 cycles
   \   0000BC                       ; ------------------------------------- Block: 8 cycles
   \   0000BC A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0000BE A1                    INCW      AX                 ;; 1 cycle
   \   0000BF B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
   \   0000C1 440800                CMPW      AX, #0x8           ;; 1 cycle
   \   0000C4 DCD4                  BC        ??ST7579_Write_8   ;; 4 cycles
   \   0000C6                       ; ------------------------------------- Block: 8 cycles
   \   0000C6 F3                    CLRB      B                  ;; 1 cycle
   \   0000C7 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   0000C9 FD....                CALL      ST7579_SetPage     ;; 3 cycles
   \   0000CC F3                    CLRB      B                  ;; 1 cycle
   \   0000CD A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   0000CF FD....                CALL      ST7579_SetChar     ;; 3 cycles
   \   0000D2 ED....                BR        N:??ST7579_Write_2  ;; 3 cycles
   \   0000D5                       ; ------------------------------------- Block: 13 cycles
   \                     ??ST7579_SetLine_3:
   \   0000D5 320D28                MOVW      BC, #0x280D        ;; 1 cycle
   \   0000D8                       ; ------------------------------------- Block: 1 cycles
   \                     ??ST7579_Write_10:
   \   0000D8 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   0000DA FD....                CALL      ST7579_Send16bitsCommand  ;; 3 cycles
   \   0000DD ED....                BR        N:??ST7579_Write_2  ;; 3 cycles
   \   0000E0                       ; ------------------------------------- Block: 7 cycles
   \                     ??ST7579_SetLine_4:
   \   0000E0 320C28                MOVW      BC, #0x280C        ;; 1 cycle
   \   0000E3 EFF3                  BR        S:??ST7579_Write_10  ;; 3 cycles
   \   0000E5                       ; ------------------------------------- Block: 4 cycles
   \                     ??ST7579_SetLine_5:
   \   0000E5 F6                    CLRW      AX                 ;; 1 cycle
   \   0000E6 B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
   \   0000E8 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   0000EA A1                    INCW      AX                 ;; 1 cycle
   \   0000EB A1                    INCW      AX                 ;; 1 cycle
   \   0000EC B800                  MOVW      [SP], AX           ;; 1 cycle
   \   0000EE                       ; ------------------------------------- Block: 6 cycles
   \                     ??ST7579_Write_11:
   \   0000EE F3                    CLRB      B                  ;; 1 cycle
   \   0000EF A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   0000F1 FD....                CALL      ST7579_SetLine     ;; 3 cycles
   \   0000F4 F3                    CLRB      B                  ;; 1 cycle
   \   0000F5 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   0000F7 FD....                CALL      ST7579_SetChar     ;; 3 cycles
   \   0000FA A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0000FC 60                    MOV       A, X               ;; 1 cycle
   \   0000FD 73                    MOV       B, A               ;; 1 cycle
   \   0000FE A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   000100 FD....                CALL      ST7579_SetPage     ;; 3 cycles
   \   000103 5310                  MOV       B, #0x10           ;; 1 cycle
   \   000105                       ; ------------------------------------- Block: 18 cycles
   \                     ??ST7579_Write_12:
   \   000105 51FF                  MOV       A, #0xFF           ;; 1 cycle
   \   000107 16                    MOVW      HL, AX             ;; 1 cycle
   \   000108 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00010A FD....                CALL      N:?Subroutine12    ;; 3 cycles
   \   00010D                       ; ------------------------------------- Block: 6 cycles
   \                     ??CrossCallReturnLabel_30:
   \   00010D C5                    PUSH      DE                 ;; 1 cycle
   \   00010E C6                    POP       HL                 ;; 1 cycle
   \   00010F FD....                CALL      N:?Subroutine8     ;; 3 cycles
   \   000112                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_50:
   \   000112 61EA                  CALL      DE                 ;; 3 cycles
   \   000114 E1                    ONEB      A                  ;; 1 cycle
   \   000115 16                    MOVW      HL, AX             ;; 1 cycle
   \   000116 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000118 FD....                CALL      N:?Subroutine12    ;; 3 cycles
   \   00011B                       ; ------------------------------------- Block: 9 cycles
   \                     ??CrossCallReturnLabel_31:
   \   00011B C5                    PUSH      DE                 ;; 1 cycle
   \   00011C C6                    POP       HL                 ;; 1 cycle
   \   00011D FD....                CALL      N:?Subroutine8     ;; 3 cycles
   \   000120                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_51:
   \   000120 61EA                  CALL      DE                 ;; 3 cycles
   \   000122 E1                    ONEB      A                  ;; 1 cycle
   \   000123 16                    MOVW      HL, AX             ;; 1 cycle
   \   000124 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000126 FD....                CALL      N:?Subroutine12    ;; 3 cycles
   \   000129                       ; ------------------------------------- Block: 9 cycles
   \                     ??CrossCallReturnLabel_32:
   \   000129 C5                    PUSH      DE                 ;; 1 cycle
   \   00012A C6                    POP       HL                 ;; 1 cycle
   \   00012B FD....                CALL      N:?Subroutine8     ;; 3 cycles
   \   00012E                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_52:
   \   00012E 61EA                  CALL      DE                 ;; 3 cycles
   \   000130 E1                    ONEB      A                  ;; 1 cycle
   \   000131 16                    MOVW      HL, AX             ;; 1 cycle
   \   000132 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000134 FD....                CALL      N:?Subroutine12    ;; 3 cycles
   \   000137                       ; ------------------------------------- Block: 9 cycles
   \                     ??CrossCallReturnLabel_33:
   \   000137 C5                    PUSH      DE                 ;; 1 cycle
   \   000138 C6                    POP       HL                 ;; 1 cycle
   \   000139 FD....                CALL      N:?Subroutine8     ;; 3 cycles
   \   00013C                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_53:
   \   00013C 61EA                  CALL      DE                 ;; 3 cycles
   \   00013E E1                    ONEB      A                  ;; 1 cycle
   \   00013F 16                    MOVW      HL, AX             ;; 1 cycle
   \   000140 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000142 FD....                CALL      N:?Subroutine12    ;; 3 cycles
   \   000145                       ; ------------------------------------- Block: 9 cycles
   \                     ??CrossCallReturnLabel_34:
   \   000145 C5                    PUSH      DE                 ;; 1 cycle
   \   000146 C6                    POP       HL                 ;; 1 cycle
   \   000147 FD....                CALL      N:?Subroutine8     ;; 3 cycles
   \   00014A                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_54:
   \   00014A 61EA                  CALL      DE                 ;; 3 cycles
   \   00014C E1                    ONEB      A                  ;; 1 cycle
   \   00014D 16                    MOVW      HL, AX             ;; 1 cycle
   \   00014E A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000150 FD....                CALL      N:?Subroutine12    ;; 3 cycles
   \   000153                       ; ------------------------------------- Block: 9 cycles
   \                     ??CrossCallReturnLabel_35:
   \   000153 C5                    PUSH      DE                 ;; 1 cycle
   \   000154 C6                    POP       HL                 ;; 1 cycle
   \   000155 FD....                CALL      N:?Subroutine8     ;; 3 cycles
   \   000158                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_55:
   \   000158 61EA                  CALL      DE                 ;; 3 cycles
   \   00015A E1                    ONEB      A                  ;; 1 cycle
   \   00015B 16                    MOVW      HL, AX             ;; 1 cycle
   \   00015C A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00015E FD....                CALL      N:?Subroutine12    ;; 3 cycles
   \   000161                       ; ------------------------------------- Block: 9 cycles
   \                     ??CrossCallReturnLabel_36:
   \   000161 C5                    PUSH      DE                 ;; 1 cycle
   \   000162 C6                    POP       HL                 ;; 1 cycle
   \   000163 FD....                CALL      N:?Subroutine8     ;; 3 cycles
   \   000166                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_56:
   \   000166 61EA                  CALL      DE                 ;; 3 cycles
   \   000168 E1                    ONEB      A                  ;; 1 cycle
   \   000169 16                    MOVW      HL, AX             ;; 1 cycle
   \   00016A A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00016C FD....                CALL      N:?Subroutine12    ;; 3 cycles
   \   00016F                       ; ------------------------------------- Block: 9 cycles
   \                     ??CrossCallReturnLabel_37:
   \   00016F C5                    PUSH      DE                 ;; 1 cycle
   \   000170 C6                    POP       HL                 ;; 1 cycle
   \   000171 FD....                CALL      N:?Subroutine8     ;; 3 cycles
   \   000174                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_57:
   \   000174 61EA                  CALL      DE                 ;; 3 cycles
   \   000176 93                    DEC       B                  ;; 1 cycle
   \   000177 DF8C                  BNZ       ??ST7579_Write_12  ;; 4 cycles
   \   000179                       ; ------------------------------------- Block: 8 cycles
   \   000179 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00017B A1                    INCW      AX                 ;; 1 cycle
   \   00017C B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
   \   00017E 440800                CMPW      AX, #0x8           ;; 1 cycle
   \   000181 61C8                  SKC                          ;; 4 cycles
   \   000183 ED....                BR        N:??ST7579_Write_2  ;; 4 cycles
   \   000186                       ; ------------------------------------- Block: 8 cycles
   \   000186 ED....                BR        N:??ST7579_Write_11  ;; 3 cycles
   \   000189                       ; ------------------------------------- Block: 3 cycles
   \                     ??ST7579_SetLine_6:
   \   000189 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   00018B FD....                CALL      N:?Subroutine6     ;; 3 cycles
   \   00018E                       ; ------------------------------------- Block: 4 cycles
   \                     ??CrossCallReturnLabel_14:
   \   00018E B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
   \   000190 040800                ADDW      AX, #0x8           ;; 1 cycle
   \   000193 47                    CMPW      AX, HL             ;; 1 cycle
   \   000194 61D336                BNH       ??ST7579_SetLine_8  ;; 4 cycles
   \   000197                       ; ------------------------------------- Block: 7 cycles
   \   000197 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000199 66                    MOV       A, L               ;; 1 cycle
   \   00019A 6128                  SUB       A, X               ;; 1 cycle
   \   00019C 72                    MOV       C, A               ;; 1 cycle
   \   00019D 30FF00                MOVW      AX, #0xFF          ;; 1 cycle
   \   0001A0 FD....                CALL      N:?I_LSH_L02       ;; 3 cycles
   \   0001A3 60                    MOV       A, X               ;; 1 cycle
   \   0001A4 9804                  MOV       [SP+0x04], A       ;; 1 cycle
   \   0001A6 EF25                  BR        S:??ST7579_SetLine_8  ;; 3 cycles
   \   0001A8                       ; ------------------------------------- Block: 13 cycles
   \                     ??ST7579_Write_13:
   \   0001A8 8804                  MOV       A, [SP+0x04]       ;; 1 cycle
   \   0001AA 16                    MOVW      HL, AX             ;; 1 cycle
   \   0001AB A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   0001AD FD....                CALL      N:?Subroutine12    ;; 3 cycles
   \   0001B0                       ; ------------------------------------- Block: 6 cycles
   \                     ??CrossCallReturnLabel_38:
   \   0001B0 C5                    PUSH      DE                 ;; 1 cycle
   \   0001B1 C6                    POP       HL                 ;; 1 cycle
   \   0001B2 FD....                CALL      N:?Subroutine8     ;; 3 cycles
   \   0001B5                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_58:
   \   0001B5 61EA                  CALL      DE                 ;; 3 cycles
   \   0001B7 A3                    INCW      BC                 ;; 1 cycle
   \   0001B8                       ; ------------------------------------- Block: 4 cycles
   \                     ??ST7579_Write_14:
   \   0001B8 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   0001BA 16                    MOVW      HL, AX             ;; 1 cycle
   \   0001BB AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   0001BC 16                    MOVW      HL, AX             ;; 1 cycle
   \   0001BD AC06                  MOVW      AX, [HL+0x06]      ;; 1 cycle
   \   0001BF 43                    CMPW      AX, BC             ;; 1 cycle
   \   0001C0 DEE6                  BNC       ??ST7579_Write_13  ;; 4 cycles
   \   0001C2                       ; ------------------------------------- Block: 10 cycles
   \   0001C2 51FF                  MOV       A, #0xFF           ;; 1 cycle
   \   0001C4 9804                  MOV       [SP+0x04], A       ;; 1 cycle
   \   0001C6 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0001C8 040800                ADDW      AX, #0x8           ;; 1 cycle
   \   0001CB B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
   \   0001CD                       ; ------------------------------------- Block: 5 cycles
   \                     ??ST7579_SetLine_8:
   \   0001CD A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0001CF 16                    MOVW      HL, AX             ;; 1 cycle
   \   0001D0 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   0001D2 14                    MOVW      DE, AX             ;; 1 cycle
   \   0001D3 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   0001D4 14                    MOVW      DE, AX             ;; 1 cycle
   \   0001D5 AA08                  MOVW      AX, [DE+0x08]      ;; 1 cycle
   \   0001D7 47                    CMPW      AX, HL             ;; 1 cycle
   \   0001D8 61D8                  SKNC                         ;; 4 cycles
   \   0001DA ED....                BR        N:??ST7579_Write_2  ;; 4 cycles
   \   0001DD                       ; ------------------------------------- Block: 12 cycles
   \   0001DD 17                    MOVW      AX, HL             ;; 1 cycle
   \   0001DE 313E                  SHRW      AX, 0x3            ;; 1 cycle
   \   0001E0 60                    MOV       A, X               ;; 1 cycle
   \   0001E1 73                    MOV       B, A               ;; 1 cycle
   \   0001E2 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   0001E4 FD....                CALL      ST7579_SetPage     ;; 3 cycles
   \   0001E7 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   0001E9 FD....                CALL      N:?Subroutine4     ;; 3 cycles
   \   0001EC                       ; ------------------------------------- Block: 12 cycles
   \                     ??CrossCallReturnLabel_6:
   \   0001EC A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   0001EE FD....                CALL      ST7579_SetChar     ;; 3 cycles
   \   0001F1 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   0001F3 14                    MOVW      DE, AX             ;; 1 cycle
   \   0001F4 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   0001F5 040800                ADDW      AX, #0x8           ;; 1 cycle
   \   0001F8 16                    MOVW      HL, AX             ;; 1 cycle
   \   0001F9 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0001FB 040800                ADDW      AX, #0x8           ;; 1 cycle
   \   0001FE 14                    MOVW      DE, AX             ;; 1 cycle
   \   0001FF AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000200 45                    CMPW      AX, DE             ;; 1 cycle
   \   000201 DE16                  BNC       ??ST7579_SetLine_9  ;; 4 cycles
   \   000203                       ; ------------------------------------- Block: 18 cycles
   \   000203 60                    MOV       A, X               ;; 1 cycle
   \   000204 73                    MOV       B, A               ;; 1 cycle
   \   000205 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000207 60                    MOV       A, X               ;; 1 cycle
   \   000208 0C07                  ADD       A, #0x7            ;; 1 cycle
   \   00020A 612B                  SUB       A, B               ;; 1 cycle
   \   00020C 72                    MOV       C, A               ;; 1 cycle
   \   00020D 30FF00                MOVW      AX, #0xFF          ;; 1 cycle
   \   000210 FD....                CALL      N:?SI_RSH_L02      ;; 3 cycles
   \   000213 8804                  MOV       A, [SP+0x04]       ;; 1 cycle
   \   000215 6158                  AND       A, X               ;; 1 cycle
   \   000217 9804                  MOV       [SP+0x04], A       ;; 1 cycle
   \   000219                       ; ------------------------------------- Block: 14 cycles
   \                     ??ST7579_SetLine_9:
   \   000219 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   00021B FD....                CALL      N:?Subroutine14    ;; 3 cycles
   \   00021E                       ; ------------------------------------- Block: 4 cycles
   \                     ??CrossCallReturnLabel_45:
   \   00021E 12                    MOVW      BC, AX             ;; 1 cycle
   \   00021F A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   000221 A1                    INCW      AX                 ;; 1 cycle
   \   000222 A1                    INCW      AX                 ;; 1 cycle
   \   000223 B800                  MOVW      [SP], AX           ;; 1 cycle
   \   000225 EF91                  BR        S:??ST7579_Write_14  ;; 3 cycles
   \   000227                       ; ------------------------------------- Block: 8 cycles
   \                     ??ST7579_SetLine_7:
   \   000227 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   000229 FD....                CALL      N:?Subroutine6     ;; 3 cycles
   \   00022C                       ; ------------------------------------- Block: 4 cycles
   \                     ??CrossCallReturnLabel_15:
   \   00022C B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
   \   00022E A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   000230 A1                    INCW      AX                 ;; 1 cycle
   \   000231 A1                    INCW      AX                 ;; 1 cycle
   \   000232 B800                  MOVW      [SP], AX           ;; 1 cycle
   \   000234 EF20                  BR        S:??ST7579_SetLine_10  ;; 3 cycles
   \   000236                       ; ------------------------------------- Block: 8 cycles
   \                     ??ST7579_Write_15:
   \   000236 F1                    CLRB      A                  ;; 1 cycle
   \   000237 16                    MOVW      HL, AX             ;; 1 cycle
   \   000238 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00023A FD....                CALL      N:?Subroutine12    ;; 3 cycles
   \   00023D                       ; ------------------------------------- Block: 6 cycles
   \                     ??CrossCallReturnLabel_39:
   \   00023D C5                    PUSH      DE                 ;; 1 cycle
   \   00023E C6                    POP       HL                 ;; 1 cycle
   \   00023F FD....                CALL      N:?Subroutine8     ;; 3 cycles
   \   000242                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_59:
   \   000242 61EA                  CALL      DE                 ;; 3 cycles
   \   000244 A3                    INCW      BC                 ;; 1 cycle
   \   000245                       ; ------------------------------------- Block: 4 cycles
   \                     ??ST7579_Write_16:
   \   000245 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   000247 16                    MOVW      HL, AX             ;; 1 cycle
   \   000248 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000249 16                    MOVW      HL, AX             ;; 1 cycle
   \   00024A AC06                  MOVW      AX, [HL+0x06]      ;; 1 cycle
   \   00024C 43                    CMPW      AX, BC             ;; 1 cycle
   \   00024D DEE7                  BNC       ??ST7579_Write_15  ;; 4 cycles
   \   00024F                       ; ------------------------------------- Block: 10 cycles
   \   00024F A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000251 040800                ADDW      AX, #0x8           ;; 1 cycle
   \   000254 B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
   \   000256                       ; ------------------------------------- Block: 3 cycles
   \                     ??ST7579_SetLine_10:
   \   000256 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000258 16                    MOVW      HL, AX             ;; 1 cycle
   \   000259 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   00025B 14                    MOVW      DE, AX             ;; 1 cycle
   \   00025C A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   00025D 14                    MOVW      DE, AX             ;; 1 cycle
   \   00025E AA08                  MOVW      AX, [DE+0x08]      ;; 1 cycle
   \   000260 47                    CMPW      AX, HL             ;; 1 cycle
   \   000261 61D8                  SKNC                         ;; 4 cycles
   \   000263 ED....                BR        N:??ST7579_Write_2  ;; 4 cycles
   \   000266                       ; ------------------------------------- Block: 12 cycles
   \   000266 17                    MOVW      AX, HL             ;; 1 cycle
   \   000267 313E                  SHRW      AX, 0x3            ;; 1 cycle
   \   000269 60                    MOV       A, X               ;; 1 cycle
   \   00026A 73                    MOV       B, A               ;; 1 cycle
   \   00026B A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   00026D FD....                CALL      ST7579_SetPage     ;; 3 cycles
   \   000270 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   000272 FD....                CALL      N:?Subroutine4     ;; 3 cycles
   \   000275                       ; ------------------------------------- Block: 12 cycles
   \                     ??CrossCallReturnLabel_7:
   \   000275 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   000277 FD....                CALL      ST7579_SetChar     ;; 3 cycles
   \   00027A A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   00027C FD....                CALL      N:?Subroutine14    ;; 3 cycles
   \   00027F                       ; ------------------------------------- Block: 8 cycles
   \                     ??CrossCallReturnLabel_46:
   \   00027F 12                    MOVW      BC, AX             ;; 1 cycle
   \   000280 EFC3                  BR        S:??ST7579_Write_16  ;; 3 cycles
   \   000282                       ; ------------------------------------- Block: 4 cycles
   \                     ??ST7579_Write_17:
   \   000282 15                    MOVW      AX, DE             ;; 1 cycle
   \   000283 01                    ADDW      AX, AX             ;; 1 cycle
   \   000284 14                    MOVW      DE, AX             ;; 1 cycle
   \   000285 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   000287 FD....                CALL      N:?Subroutine5     ;; 3 cycles
   \   00028A                       ; ------------------------------------- Block: 7 cycles
   \                     ??CrossCallReturnLabel_11:
   \   00028A 9804                  MOV       [SP+0x04], A       ;; 1 cycle
   \   00028C 8A01                  MOV       A, [DE+0x01]       ;; 1 cycle
   \   00028E 9805                  MOV       [SP+0x05], A       ;; 1 cycle
   \   000290 15                    MOVW      AX, DE             ;; 1 cycle
   \   000291 A1                    INCW      AX                 ;; 1 cycle
   \   000292 A1                    INCW      AX                 ;; 1 cycle
   \   000293 B806                  MOVW      [SP+0x06], AX      ;; 1 cycle
   \   000295 F6                    CLRW      AX                 ;; 1 cycle
   \   000296 B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
   \   000298 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   00029A A1                    INCW      AX                 ;; 1 cycle
   \   00029B A1                    INCW      AX                 ;; 1 cycle
   \   00029C B800                  MOVW      [SP], AX           ;; 1 cycle
   \   00029E EF26                  BR        S:??ST7579_SetLine_11  ;; 3 cycles
   \   0002A0                       ; ------------------------------------- Block: 16 cycles
   \                     ??ST7579_Write_18:
   \   0002A0 A806                  MOVW      AX, [SP+0x06]      ;; 1 cycle
   \   0002A2 16                    MOVW      HL, AX             ;; 1 cycle
   \   0002A3 8B                    MOV       A, [HL]            ;; 1 cycle
   \   0002A4 16                    MOVW      HL, AX             ;; 1 cycle
   \   0002A5 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   0002A7 FD....                CALL      N:?Subroutine12    ;; 3 cycles
   \   0002AA                       ; ------------------------------------- Block: 8 cycles
   \                     ??CrossCallReturnLabel_40:
   \   0002AA C5                    PUSH      DE                 ;; 1 cycle
   \   0002AB C6                    POP       HL                 ;; 1 cycle
   \   0002AC FD....                CALL      N:?Subroutine8     ;; 3 cycles
   \   0002AF                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_60:
   \   0002AF 61EA                  CALL      DE                 ;; 3 cycles
   \   0002B1 A3                    INCW      BC                 ;; 1 cycle
   \   0002B2 A806                  MOVW      AX, [SP+0x06]      ;; 1 cycle
   \   0002B4 A1                    INCW      AX                 ;; 1 cycle
   \   0002B5 B806                  MOVW      [SP+0x06], AX      ;; 1 cycle
   \   0002B7                       ; ------------------------------------- Block: 7 cycles
   \                     ??ST7579_Write_19:
   \   0002B7 8804                  MOV       A, [SP+0x04]       ;; 1 cycle
   \   0002B9 70                    MOV       X, A               ;; 1 cycle
   \   0002BA F1                    CLRB      A                  ;; 1 cycle
   \   0002BB 43                    CMPW      AX, BC             ;; 1 cycle
   \   0002BC 61C3E1                BH        ??ST7579_Write_18  ;; 4 cycles
   \   0002BF                       ; ------------------------------------- Block: 8 cycles
   \   0002BF A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0002C1 040800                ADDW      AX, #0x8           ;; 1 cycle
   \   0002C4 B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
   \   0002C6                       ; ------------------------------------- Block: 3 cycles
   \                     ??ST7579_SetLine_11:
   \   0002C6 8805                  MOV       A, [SP+0x05]       ;; 1 cycle
   \   0002C8 76                    MOV       L, A               ;; 1 cycle
   \   0002C9 5700                  MOV       H, #0x0            ;; 1 cycle
   \   0002CB A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0002CD 47                    CMPW      AX, HL             ;; 1 cycle
   \   0002CE 61C8                  SKC                          ;; 4 cycles
   \   0002D0 ED....                BR        N:??ST7579_SetLine_12  ;; 4 cycles
   \   0002D3                       ; ------------------------------------- Block: 9 cycles
   \   0002D3 16                    MOVW      HL, AX             ;; 1 cycle
   \   0002D4 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   0002D6 FD....                CALL      N:?Subroutine10    ;; 3 cycles
   \   0002D9                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_18:
   \   0002D9 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   0002DB FD....                CALL      ST7579_SetPage     ;; 3 cycles
   \   0002DE A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   0002E0 FD....                CALL      N:?Subroutine4     ;; 3 cycles
   \   0002E3                       ; ------------------------------------- Block: 8 cycles
   \                     ??CrossCallReturnLabel_8:
   \   0002E3 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   0002E5 FD....                CALL      ST7579_SetChar     ;; 3 cycles
   \   0002E8 F7                    CLRW      BC                 ;; 1 cycle
   \   0002E9 EFCC                  BR        S:??ST7579_Write_19  ;; 3 cycles
   \   0002EB                       ; ------------------------------------- Block: 8 cycles
   \                     ??ST7579_Write_20:
   \   0002EB 15                    MOVW      AX, DE             ;; 1 cycle
   \   0002EC 01                    ADDW      AX, AX             ;; 1 cycle
   \   0002ED 14                    MOVW      DE, AX             ;; 1 cycle
   \   0002EE A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   0002F0 FD....                CALL      N:?Subroutine5     ;; 3 cycles
   \   0002F3                       ; ------------------------------------- Block: 7 cycles
   \                     ??CrossCallReturnLabel_12:
   \   0002F3 9804                  MOV       [SP+0x04], A       ;; 1 cycle
   \   0002F5 8A01                  MOV       A, [DE+0x01]       ;; 1 cycle
   \   0002F7 9805                  MOV       [SP+0x05], A       ;; 1 cycle
   \   0002F9 F6                    CLRW      AX                 ;; 1 cycle
   \   0002FA B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
   \   0002FC A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   0002FE A1                    INCW      AX                 ;; 1 cycle
   \   0002FF A1                    INCW      AX                 ;; 1 cycle
   \   000300 B800                  MOVW      [SP], AX           ;; 1 cycle
   \   000302 EF1D                  BR        S:??ST7579_SetLine_13  ;; 3 cycles
   \   000304                       ; ------------------------------------- Block: 12 cycles
   \                     ??ST7579_Write_21:
   \   000304 16                    MOVW      HL, AX             ;; 1 cycle
   \   000305 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000307 FD....                CALL      N:?Subroutine12    ;; 3 cycles
   \   00030A                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_41:
   \   00030A C5                    PUSH      DE                 ;; 1 cycle
   \   00030B C6                    POP       HL                 ;; 1 cycle
   \   00030C FD....                CALL      N:?Subroutine8     ;; 3 cycles
   \   00030F                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_61:
   \   00030F 61EA                  CALL      DE                 ;; 3 cycles
   \   000311 A3                    INCW      BC                 ;; 1 cycle
   \   000312                       ; ------------------------------------- Block: 4 cycles
   \                     ??ST7579_Write_22:
   \   000312 8804                  MOV       A, [SP+0x04]       ;; 1 cycle
   \   000314 70                    MOV       X, A               ;; 1 cycle
   \   000315 F1                    CLRB      A                  ;; 1 cycle
   \   000316 43                    CMPW      AX, BC             ;; 1 cycle
   \   000317 61C3EA                BH        ??ST7579_Write_21  ;; 4 cycles
   \   00031A                       ; ------------------------------------- Block: 8 cycles
   \   00031A A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00031C 040800                ADDW      AX, #0x8           ;; 1 cycle
   \   00031F B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
   \   000321                       ; ------------------------------------- Block: 3 cycles
   \                     ??ST7579_SetLine_13:
   \   000321 8805                  MOV       A, [SP+0x05]       ;; 1 cycle
   \   000323 76                    MOV       L, A               ;; 1 cycle
   \   000324 5700                  MOV       H, #0x0            ;; 1 cycle
   \   000326 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000328 47                    CMPW      AX, HL             ;; 1 cycle
   \   000329 61C8                  SKC                          ;; 4 cycles
   \   00032B ED....                BR        N:??ST7579_SetLine_12  ;; 4 cycles
   \   00032E                       ; ------------------------------------- Block: 9 cycles
   \   00032E 16                    MOVW      HL, AX             ;; 1 cycle
   \   00032F A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   000331 FD....                CALL      N:?Subroutine10    ;; 3 cycles
   \   000334                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_19:
   \   000334 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   000336 FD....                CALL      ST7579_SetPage     ;; 3 cycles
   \   000339 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   00033B FD....                CALL      N:?Subroutine4     ;; 3 cycles
   \   00033E                       ; ------------------------------------- Block: 8 cycles
   \                     ??CrossCallReturnLabel_9:
   \   00033E A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   000340 FD....                CALL      ST7579_SetChar     ;; 3 cycles
   \   000343 F7                    CLRW      BC                 ;; 1 cycle
   \   000344 EFCC                  BR        S:??ST7579_Write_22  ;; 3 cycles
   \   000346                       ; ------------------------------------- Block: 8 cycles
   \                     ??ST7579_Write_23:
   \   000346 15                    MOVW      AX, DE             ;; 1 cycle
   \   000347 01                    ADDW      AX, AX             ;; 1 cycle
   \   000348 14                    MOVW      DE, AX             ;; 1 cycle
   \   000349 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   00034B FD....                CALL      N:?Subroutine5     ;; 3 cycles
   \   00034E                       ; ------------------------------------- Block: 7 cycles
   \                     ??CrossCallReturnLabel_13:
   \   00034E 9804                  MOV       [SP+0x04], A       ;; 1 cycle
   \   000350 8A01                  MOV       A, [DE+0x01]       ;; 1 cycle
   \   000352 9805                  MOV       [SP+0x05], A       ;; 1 cycle
   \   000354 15                    MOVW      AX, DE             ;; 1 cycle
   \   000355 A1                    INCW      AX                 ;; 1 cycle
   \   000356 A1                    INCW      AX                 ;; 1 cycle
   \   000357 B806                  MOVW      [SP+0x06], AX      ;; 1 cycle
   \   000359 F6                    CLRW      AX                 ;; 1 cycle
   \   00035A B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
   \   00035C A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   00035E A1                    INCW      AX                 ;; 1 cycle
   \   00035F A1                    INCW      AX                 ;; 1 cycle
   \   000360 B800                  MOVW      [SP], AX           ;; 1 cycle
   \   000362 EF28                  BR        S:??ST7579_SetLine_14  ;; 3 cycles
   \   000364                       ; ------------------------------------- Block: 16 cycles
   \                     ??ST7579_Write_24:
   \   000364 A806                  MOVW      AX, [SP+0x06]      ;; 1 cycle
   \   000366 16                    MOVW      HL, AX             ;; 1 cycle
   \   000367 8B                    MOV       A, [HL]            ;; 1 cycle
   \   000368 7CFF                  XOR       A, #0xFF           ;; 1 cycle
   \   00036A 16                    MOVW      HL, AX             ;; 1 cycle
   \   00036B A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00036D FD....                CALL      N:?Subroutine12    ;; 3 cycles
   \   000370                       ; ------------------------------------- Block: 9 cycles
   \                     ??CrossCallReturnLabel_42:
   \   000370 C5                    PUSH      DE                 ;; 1 cycle
   \   000371 C6                    POP       HL                 ;; 1 cycle
   \   000372 FD....                CALL      N:?Subroutine8     ;; 3 cycles
   \   000375                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_62:
   \   000375 61EA                  CALL      DE                 ;; 3 cycles
   \   000377 A3                    INCW      BC                 ;; 1 cycle
   \   000378 A806                  MOVW      AX, [SP+0x06]      ;; 1 cycle
   \   00037A A1                    INCW      AX                 ;; 1 cycle
   \   00037B B806                  MOVW      [SP+0x06], AX      ;; 1 cycle
   \   00037D                       ; ------------------------------------- Block: 7 cycles
   \                     ??ST7579_Write_25:
   \   00037D 8804                  MOV       A, [SP+0x04]       ;; 1 cycle
   \   00037F 70                    MOV       X, A               ;; 1 cycle
   \   000380 F1                    CLRB      A                  ;; 1 cycle
   \   000381 43                    CMPW      AX, BC             ;; 1 cycle
   \   000382 61C3DF                BH        ??ST7579_Write_24  ;; 4 cycles
   \   000385                       ; ------------------------------------- Block: 8 cycles
   \   000385 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000387 040800                ADDW      AX, #0x8           ;; 1 cycle
   \   00038A B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
   \   00038C                       ; ------------------------------------- Block: 3 cycles
   \                     ??ST7579_SetLine_14:
   \   00038C 8805                  MOV       A, [SP+0x05]       ;; 1 cycle
   \   00038E 76                    MOV       L, A               ;; 1 cycle
   \   00038F 5700                  MOV       H, #0x0            ;; 1 cycle
   \   000391 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000393 47                    CMPW      AX, HL             ;; 1 cycle
   \   000394 DE18                  BNC       ??ST7579_SetLine_12  ;; 4 cycles
   \   000396                       ; ------------------------------------- Block: 9 cycles
   \   000396 16                    MOVW      HL, AX             ;; 1 cycle
   \   000397 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   000399 FD....                CALL      N:?Subroutine10    ;; 3 cycles
   \   00039C                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_20:
   \   00039C A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   00039E FD....                CALL      ST7579_SetPage     ;; 3 cycles
   \   0003A1 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   0003A3 FD....                CALL      N:?Subroutine4     ;; 3 cycles
   \   0003A6                       ; ------------------------------------- Block: 8 cycles
   \                     ??CrossCallReturnLabel_10:
   \   0003A6 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   0003A8 FD....                CALL      ST7579_SetChar     ;; 3 cycles
   \   0003AB F7                    CLRW      BC                 ;; 1 cycle
   \   0003AC EFCF                  BR        S:??ST7579_Write_25  ;; 3 cycles
   \   0003AE                       ; ------------------------------------- Block: 8 cycles
   \                     ??ST7579_SetLine_12:
   \   0003AE A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   0003B0 16                    MOVW      HL, AX             ;; 1 cycle
   \   0003B1 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   0003B2 14                    MOVW      DE, AX             ;; 1 cycle
   \   0003B3 A5                    INCW      DE                 ;; 1 cycle
   \   0003B4 A5                    INCW      DE                 ;; 1 cycle
   \   0003B5 8804                  MOV       A, [SP+0x04]       ;; 1 cycle
   \   0003B7 76                    MOV       L, A               ;; 1 cycle
   \   0003B8 5700                  MOV       H, #0x0            ;; 1 cycle
   \   0003BA A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   0003BB 07                    ADDW      AX, HL             ;; 1 cycle
   \   0003BC B9                    MOVW      [DE], AX           ;; 1 cycle
   \   0003BD ED....                BR        N:??ST7579_Write_2  ;; 3 cycles
   \   0003C0                       ; ------------------------------------- Block: 15 cycles
   \                     ??ST7579_Write_26:
   \   0003C0 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   0003C2 16                    MOVW      HL, AX             ;; 1 cycle
   \   0003C3 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   0003C4 16                    MOVW      HL, AX             ;; 1 cycle
   \   0003C5 15                    MOVW      AX, DE             ;; 1 cycle
   \   0003C6 BC06                  MOVW      [HL+0x06], AX      ;; 1 cycle
   \   0003C8 ED....                BR        N:??ST7579_Write_2  ;; 3 cycles
   \   0003CB                       ; ------------------------------------- Block: 9 cycles
   \                     ??ST7579_Write_27:
   \   0003CB A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   0003CD 16                    MOVW      HL, AX             ;; 1 cycle
   \   0003CE AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   0003CF 16                    MOVW      HL, AX             ;; 1 cycle
   \   0003D0 15                    MOVW      AX, DE             ;; 1 cycle
   \   0003D1 BC08                  MOVW      [HL+0x08], AX      ;; 1 cycle
   \   0003D3 ED....                BR        N:??ST7579_Write_2  ;; 3 cycles
   \   0003D6                       ; ------------------------------------- Block: 9 cycles
   \                     ??ST7579_Write_28:
   \   0003D6 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   0003D8 16                    MOVW      HL, AX             ;; 1 cycle
   \   0003D9 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   0003DA 16                    MOVW      HL, AX             ;; 1 cycle
   \   0003DB 64                    MOV       A, E               ;; 1 cycle
   \   0003DC 9C1A                  MOV       [HL+0x1A], A       ;; 1 cycle
   \   0003DE A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   0003E0 16                    MOVW      HL, AX             ;; 1 cycle
   \   0003E1 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   0003E2 16                    MOVW      HL, AX             ;; 1 cycle
   \   0003E3 8C1A                  MOV       A, [HL+0x1A]       ;; 1 cycle
   \   0003E5 72                    MOV       C, A               ;; 1 cycle
   \   0003E6 F3                    CLRB      B                  ;; 1 cycle
   \   0003E7 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   0003E9 FD....                CALL      ST7579_SetFrameRate  ;; 3 cycles
   \   0003EC ED....                BR        N:??ST7579_Write_2  ;; 3 cycles
   \   0003EF                       ; ------------------------------------- Block: 20 cycles
   \                     ??ST7579_Write_29:
   \   0003EF A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   0003F1 16                    MOVW      HL, AX             ;; 1 cycle
   \   0003F2 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   0003F3 16                    MOVW      HL, AX             ;; 1 cycle
   \   0003F4 64                    MOV       A, E               ;; 1 cycle
   \   0003F5 9C18                  MOV       [HL+0x18], A       ;; 1 cycle
   \   0003F7 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   0003F9 16                    MOVW      HL, AX             ;; 1 cycle
   \   0003FA AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   0003FB 16                    MOVW      HL, AX             ;; 1 cycle
   \   0003FC 8C18                  MOV       A, [HL+0x18]       ;; 1 cycle
   \   0003FE 72                    MOV       C, A               ;; 1 cycle
   \   0003FF F3                    CLRB      B                  ;; 1 cycle
   \   000400 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   000402 FD....                CALL      ST7579_SetVO_Range  ;; 3 cycles
   \   000405 ED....                BR        N:??ST7579_Write_2  ;; 3 cycles
   \   000408                       ; ------------------------------------- Block: 20 cycles
   \                     ??ST7579_Write_30:
   \   000408 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   00040A 16                    MOVW      HL, AX             ;; 1 cycle
   \   00040B AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00040C 16                    MOVW      HL, AX             ;; 1 cycle
   \   00040D 64                    MOV       A, E               ;; 1 cycle
   \   00040E 9C19                  MOV       [HL+0x19], A       ;; 1 cycle
   \   000410 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   000412 16                    MOVW      HL, AX             ;; 1 cycle
   \   000413 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000414 16                    MOVW      HL, AX             ;; 1 cycle
   \   000415 8C19                  MOV       A, [HL+0x19]       ;; 1 cycle
   \   000417 73                    MOV       B, A               ;; 1 cycle
   \   000418 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   00041A FD....                CALL      ST7579_SetSystemBiasBooster  ;; 3 cycles
   \   00041D ED....                BR        N:??ST7579_Write_2  ;; 3 cycles
   \   000420                       ; ------------------------------------- Block: 19 cycles
   \   000420                       ; ------------------------------------- Total: 880 cycles
   \   000420                       REQUIRE ?CLRL78_V1_0_L00
    343          }

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000 37                    XCHW      AX, HL             ;; 1 cycle
   \   000001 14                    MOVW      DE, AX             ;; 1 cycle
   \   000002 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000003 35                    XCHW      AX, DE             ;; 1 cycle
   \   000004 D7                    RET                          ;; 6 cycles
   \   000005                       ; ------------------------------------- Block: 10 cycles
   \   000005                       ; ------------------------------------- Total: 10 cycles
   \   000005                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000 14                    MOVW      DE, AX             ;; 1 cycle
   \   000001 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   000002 14                    MOVW      DE, AX             ;; 1 cycle
   \   000003 AA04                  MOVW      AX, [DE+0x04]      ;; 1 cycle
   \   000005 07                    ADDW      AX, HL             ;; 1 cycle
   \   000006 313E                  SHRW      AX, 0x3            ;; 1 cycle
   \   000008 60                    MOV       A, X               ;; 1 cycle
   \   000009 73                    MOV       B, A               ;; 1 cycle
   \   00000A D7                    RET                          ;; 6 cycles
   \   00000B                       ; ------------------------------------- Block: 14 cycles
   \   00000B                       ; ------------------------------------- Total: 14 cycles
   \   00000B                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000 14                    MOVW      DE, AX             ;; 1 cycle
   \   000001 AC04                  MOVW      AX, [HL+0x04]      ;; 1 cycle
   \   000003                       ; ------------------------------------- Block: 2 cycles
   \   000003                       ; ------------------------------------- Total: 2 cycles
   \   000003                       REQUIRE ?CLRL78_V1_0_L00
   \   000003                       REQUIRE ?Subroutine15
   \   000003                       ; // Fall through to label ?Subroutine15

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000 35                    XCHW      AX, DE             ;; 1 cycle
   \   000001 CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   000004 D7                    RET                          ;; 6 cycles
   \   000005                       ; ------------------------------------- Block: 8 cycles
   \   000005                       ; ------------------------------------- Total: 8 cycles
   \   000005                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000 14                    MOVW      DE, AX             ;; 1 cycle
   \   000001 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   000002 16                    MOVW      HL, AX             ;; 1 cycle
   \   000003 A7                    INCW      HL                 ;; 1 cycle
   \   000004 A7                    INCW      HL                 ;; 1 cycle
   \   000005 A7                    INCW      HL                 ;; 1 cycle
   \   000006 A7                    INCW      HL                 ;; 1 cycle
   \   000007 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000008 16                    MOVW      HL, AX             ;; 1 cycle
   \   000009 60                    MOV       A, X               ;; 1 cycle
   \   00000A F0                    CLRB      X                  ;; 1 cycle
   \   00000B 5C07                  AND       A, #0x7            ;; 1 cycle
   \   00000D 08                    XCH       A, X               ;; 1 cycle
   \   00000E 14                    MOVW      DE, AX             ;; 1 cycle
   \   00000F 17                    MOVW      AX, HL             ;; 1 cycle
   \   000010 25                    SUBW      AX, DE             ;; 1 cycle
   \   000011 D7                    RET                          ;; 6 cycles
   \   000012                       ; ------------------------------------- Block: 22 cycles
   \   000012                       ; ------------------------------------- Total: 22 cycles
   \   000012                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000 16                    MOVW      HL, AX             ;; 1 cycle
   \   000001 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000002 16                    MOVW      HL, AX             ;; 1 cycle
   \   000003 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000004 05                    ADDW      AX, DE             ;; 1 cycle
   \   000005 16                    MOVW      HL, AX             ;; 1 cycle
   \   000006 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000007 14                    MOVW      DE, AX             ;; 1 cycle
   \   000008 89                    MOV       A, [DE]            ;; 1 cycle
   \   000009 D7                    RET                          ;; 6 cycles
   \   00000A                       ; ------------------------------------- Block: 15 cycles
   \   00000A                       ; ------------------------------------- Total: 15 cycles
   \   00000A                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000 FD....                CALL      N:?Subroutine14    ;; 3 cycles
   \   000003                       ; ------------------------------------- Block: 3 cycles
   \                     ??CrossCallReturnLabel_48:
   \   000003 60                    MOV       A, X               ;; 1 cycle
   \   000004 73                    MOV       B, A               ;; 1 cycle
   \   000005 D7                    RET                          ;; 6 cycles
   \   000006                       ; ------------------------------------- Block: 8 cycles
   \   000006                       ; ------------------------------------- Total: 11 cycles
   \   000006                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000 16                    MOVW      HL, AX             ;; 1 cycle
   \   000001 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000002 16                    MOVW      HL, AX             ;; 1 cycle
   \   000003 AC02                  MOVW      AX, [HL+0x02]      ;; 1 cycle
   \   000005 D7                    RET                          ;; 6 cycles
   \   000006                       ; ------------------------------------- Block: 10 cycles
   \   000006                       ; ------------------------------------- Total: 10 cycles
   \   000006                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000 16                    MOVW      HL, AX             ;; 1 cycle
   \   000001 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000002 16                    MOVW      HL, AX             ;; 1 cycle
   \   000003 300200                MOVW      AX, #0x2           ;; 1 cycle
   \   000006 BC14                  MOVW      [HL+0x14], AX      ;; 1 cycle
   \   000008 D7                    RET                          ;; 6 cycles
   \   000009                       ; ------------------------------------- Block: 11 cycles
   \   000009                       ; ------------------------------------- Total: 11 cycles
   \   000009                       REQUIRE ?CLRL78_V1_0_L00
    344          
    345          /******************************************************************************
    346          * ID : 32.0
    347          * Outline : ST7579_Read
    348          * Include : ST7579_LCD.h
    349          * Function Name: ST7579_Read
    350          * Description : Read data from the glyph data storage using a Glyph Register
    351          *               value.
    352          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    353          *          : aRegister - specifies what to receive.
    354          *          : aValue - data received.
    355          * Return Value : 0=success, not 0= error
    356          * Calling Functions : GlyphRead
    357          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    358          T_glyphError ST7579_Read(T_glyphHandle aHandle, uint16_t aRegister, uint16_t *aValue)
   \                     ST7579_Read:
    359          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C1                    PUSH      AX                 ;; 1 cycle
   \   000001 C3                    PUSH      BC                 ;; 1 cycle
   \   000002                       ; Auto size: 4
    360              T_glyphError error = GLYPH_ERROR_ILLEGAL_OPERATION ;
   \   000002 E3                    ONEB      B                  ;; 1 cycle
    361              T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
    362          
    363              p_gw->iLCDAPI->iStatusRegister = GLYPH_STATUS_BUSY ;
   \   000003 FD....                CALL      N:?Subroutine7     ;; 3 cycles
   \   000006                       ; ------------------------------------- Block: 6 cycles
    364          
    365              switch (aRegister) {
   \                     ??CrossCallReturnLabel_17:
   \   000006 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000008 36....                MOVW      HL, #LWRD(??ST7579_Read_0)  ;; 1 cycle
   \   00000B 41..                  MOV       ES, #BYTE3(??ST7579_Read_0)  ;; 1 cycle
   \   00000D CEFC..                MOV       CS, #BYTE3(ST7579_Read)  ;; 1 cycle
   \   000010 ED....                BR        N:?I_SSWITCH_L10   ;; 3 cycles
   \   000013                       ; ------------------------------------- Block: 7 cycles
    366                  case GLYPH_STATUS:
    367                      *aValue = GLYPH_STATUS_BUSY ;
   \                     ??ST7579_Read_1:
   \   000013 300200                MOVW      AX, #0x2           ;; 1 cycle
   \   000016 B9                    MOVW      [DE], AX           ;; 1 cycle
    368                      if (p_gw->iLCDAPI->iStatusRegister == 0)
   \   000017 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000019 16                    MOVW      HL, AX             ;; 1 cycle
   \   00001A AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00001B 16                    MOVW      HL, AX             ;; 1 cycle
   \   00001C AC14                  MOVW      AX, [HL+0x14]      ;; 1 cycle
   \   00001E F7                    CLRW      BC                 ;; 1 cycle
   \   00001F 43                    CMPW      AX, BC             ;; 1 cycle
   \   000020 DF79                  BNZ       ??ST7579_SetLine_15  ;; 4 cycles
   \   000022                       ; ------------------------------------- Block: 13 cycles
    369                      {
    370                          *aValue = GLYPH_STATUS_READY ;
   \   000022 F6                    CLRW      AX                 ;; 1 cycle
   \   000023 B9                    MOVW      [DE], AX           ;; 1 cycle
    371                      }
    372                      error = GLYPH_ERROR_NONE ;
    373                      break ;
   \   000024 EF75                  BR        S:??ST7579_SetLine_15  ;; 3 cycles
   \   000026                       ; ------------------------------------- Block: 5 cycles
    374                  case GLYPH_CHAR_X:
    375                      *aValue = p_gw->iLCDAPI->iCharX_Position ;
   \                     ??ST7579_Read_2:
   \   000026 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000028 FD....                CALL      N:?Subroutine14    ;; 3 cycles
   \   00002B                       ; ------------------------------------- Block: 4 cycles
   \                     ??CrossCallReturnLabel_47:
   \   00002B EF6C                  BR        S:??ST7579_SetLine_16  ;; 3 cycles
   \   00002D                       ; ------------------------------------- Block: 3 cycles
    376                      error = GLYPH_ERROR_NONE ;
    377                      break ;
    378                  case GLYPH_CHAR_Y:
    379                      *aValue = p_gw->iLCDAPI->iCharY_Position ;
   \                     ??ST7579_Read_3:
   \   00002D A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00002F 16                    MOVW      HL, AX             ;; 1 cycle
   \   000030 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000031 16                    MOVW      HL, AX             ;; 1 cycle
   \   000032 AC04                  MOVW      AX, [HL+0x04]      ;; 1 cycle
   \   000034 EF63                  BR        S:??ST7579_SetLine_16  ;; 3 cycles
   \   000036                       ; ------------------------------------- Block: 8 cycles
    380                      error = GLYPH_ERROR_NONE ;
    381                      break ;
    382                  case GLYPH_FONT:
    383                      *aValue = p_gw->iLCDAPI->iCharFont ;
   \                     ??ST7579_Read_4:
   \   000036 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000038 16                    MOVW      HL, AX             ;; 1 cycle
   \   000039 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00003A 16                    MOVW      HL, AX             ;; 1 cycle
   \   00003B 8C0A                  MOV       A, [HL+0x0A]       ;; 1 cycle
   \   00003D EF58                  BR        S:??ST7579_SetLine_17  ;; 3 cycles
   \   00003F                       ; ------------------------------------- Block: 8 cycles
    384                      error = GLYPH_ERROR_NONE ;
    385                      break ;
    386                  case GLYPH_API_MAJOR_VERSION:
    387                      *aValue = p_gw->iLCDAPI->iFP_API_MAJOR_VERSION ;
   \                     ??ST7579_Read_5:
   \   00003F A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000041 16                    MOVW      HL, AX             ;; 1 cycle
   \   000042 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000043 16                    MOVW      HL, AX             ;; 1 cycle
   \   000044 8C0B                  MOV       A, [HL+0x0B]       ;; 1 cycle
   \   000046 EF4F                  BR        S:??ST7579_SetLine_17  ;; 3 cycles
   \   000048                       ; ------------------------------------- Block: 8 cycles
    388                      error = GLYPH_ERROR_NONE ;
    389                      break ;
    390                  case GLYPH_API_MINOR_VERSION:
    391                      *aValue = p_gw->iLCDAPI->iFP_API_MINOR_VERSION ;
   \                     ??ST7579_Read_6:
   \   000048 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00004A 16                    MOVW      HL, AX             ;; 1 cycle
   \   00004B AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00004C 16                    MOVW      HL, AX             ;; 1 cycle
   \   00004D 8C0C                  MOV       A, [HL+0x0C]       ;; 1 cycle
   \   00004F EF46                  BR        S:??ST7579_SetLine_17  ;; 3 cycles
   \   000051                       ; ------------------------------------- Block: 8 cycles
    392                      error = GLYPH_ERROR_NONE ;
    393                      break ;
    394                  case GLYPH_IMPLEMENTATION_ID:
    395                      *aValue = p_gw->iLCDAPI->iFP_IMPLEMENTATION_ID ;
   \                     ??ST7579_Read_7:
   \   000051 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000053 16                    MOVW      HL, AX             ;; 1 cycle
   \   000054 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000055 16                    MOVW      HL, AX             ;; 1 cycle
   \   000056 8C0D                  MOV       A, [HL+0x0D]       ;; 1 cycle
   \   000058 EF3D                  BR        S:??ST7579_SetLine_17  ;; 3 cycles
   \   00005A                       ; ------------------------------------- Block: 8 cycles
    396                      error = GLYPH_ERROR_NONE ;
    397                      break ;
    398                  case GLYPH_IMPL_MAJOR_VERSION:
    399                      *aValue = p_gw->iLCDAPI->iFP_IMPL_MAJOR_VERSION ;
   \                     ??ST7579_Read_8:
   \   00005A A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00005C 16                    MOVW      HL, AX             ;; 1 cycle
   \   00005D AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00005E 16                    MOVW      HL, AX             ;; 1 cycle
   \   00005F 8C0E                  MOV       A, [HL+0x0E]       ;; 1 cycle
   \   000061 EF34                  BR        S:??ST7579_SetLine_17  ;; 3 cycles
   \   000063                       ; ------------------------------------- Block: 8 cycles
    400                      error = GLYPH_ERROR_NONE ;
    401                      break ;
    402                  case GLYPH_IMPL_MINOR_VERSION:
    403                      *aValue = p_gw->iLCDAPI->iFP_IMPL_MINOR_VERSION ;
   \                     ??ST7579_Read_9:
   \   000063 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000065 16                    MOVW      HL, AX             ;; 1 cycle
   \   000066 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000067 16                    MOVW      HL, AX             ;; 1 cycle
   \   000068 8C0F                  MOV       A, [HL+0x0F]       ;; 1 cycle
   \   00006A EF2B                  BR        S:??ST7579_SetLine_17  ;; 3 cycles
   \   00006C                       ; ------------------------------------- Block: 8 cycles
    404                      error = GLYPH_ERROR_NONE ;
    405                      break ;
    406                  case GLYPH_CHAR_X2:
    407                      *aValue = p_gw->iLCDAPI->iCharX2_Position ;
   \                     ??ST7579_Read_10:
   \   00006C A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00006E 16                    MOVW      HL, AX             ;; 1 cycle
   \   00006F AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000070 16                    MOVW      HL, AX             ;; 1 cycle
   \   000071 AC06                  MOVW      AX, [HL+0x06]      ;; 1 cycle
   \   000073 EF24                  BR        S:??ST7579_SetLine_16  ;; 3 cycles
   \   000075                       ; ------------------------------------- Block: 8 cycles
    408                      error = GLYPH_ERROR_NONE ;
    409                      break ;
    410                  case GLYPH_CHAR_Y2:
    411                      *aValue = p_gw->iLCDAPI->iCharY2_Position ;
   \                     ??ST7579_Read_11:
   \   000075 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000077 16                    MOVW      HL, AX             ;; 1 cycle
   \   000078 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000079 16                    MOVW      HL, AX             ;; 1 cycle
   \   00007A AC08                  MOVW      AX, [HL+0x08]      ;; 1 cycle
   \   00007C EF1B                  BR        S:??ST7579_SetLine_16  ;; 3 cycles
   \   00007E                       ; ------------------------------------- Block: 8 cycles
    412                      error = GLYPH_ERROR_NONE ;
    413                      break ;
    414                  case GLYPH_FRAME_RATE:
    415                      *aValue = (uint16_t)p_gw->iLCDAPI->iFrameRate ;
   \                     ??ST7579_Read_12:
   \   00007E A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000080 16                    MOVW      HL, AX             ;; 1 cycle
   \   000081 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000082 16                    MOVW      HL, AX             ;; 1 cycle
   \   000083 8C1A                  MOV       A, [HL+0x1A]       ;; 1 cycle
   \   000085 EF10                  BR        S:??ST7579_SetLine_17  ;; 3 cycles
   \   000087                       ; ------------------------------------- Block: 8 cycles
    416                      error = GLYPH_ERROR_NONE ;
    417                      break ;
    418                  case GLYPH_CONTRAST:
    419                      *aValue = (uint16_t)p_gw->iLCDAPI->iContrast ;
   \                     ??ST7579_Read_13:
   \   000087 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000089 16                    MOVW      HL, AX             ;; 1 cycle
   \   00008A AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00008B 16                    MOVW      HL, AX             ;; 1 cycle
   \   00008C 8C18                  MOV       A, [HL+0x18]       ;; 1 cycle
   \   00008E EF07                  BR        S:??ST7579_SetLine_17  ;; 3 cycles
   \   000090                       ; ------------------------------------- Block: 8 cycles
    420                      error = GLYPH_ERROR_NONE ;
    421                      break ;
    422                  case GLYPH_CONTRAST_BOOST:
    423                      *aValue = (uint16_t)p_gw->iLCDAPI->iContrastBoost ;
   \                     ??ST7579_Read_14:
   \   000090 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000092 16                    MOVW      HL, AX             ;; 1 cycle
   \   000093 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000094 16                    MOVW      HL, AX             ;; 1 cycle
   \   000095 8C19                  MOV       A, [HL+0x19]       ;; 1 cycle
   \   000097                       ; ------------------------------------- Block: 5 cycles
   \                     ??ST7579_SetLine_17:
   \   000097 70                    MOV       X, A               ;; 1 cycle
   \   000098 F1                    CLRB      A                  ;; 1 cycle
   \   000099                       ; ------------------------------------- Block: 2 cycles
   \                     ??ST7579_SetLine_16:
   \   000099 B9                    MOVW      [DE], AX           ;; 1 cycle
    424                      error = GLYPH_ERROR_NONE ;
   \   00009A F3                    CLRB      B                  ;; 1 cycle
    425                      break ;
   \   00009B                       ; ------------------------------------- Block: 2 cycles
    426              }
    427          
    428              p_gw->iLCDAPI->iStatusRegister = GLYPH_STATUS_READY ;
   \                     ??ST7579_SetLine_15:
   \   00009B A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00009D 16                    MOVW      HL, AX             ;; 1 cycle
   \   00009E AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00009F 16                    MOVW      HL, AX             ;; 1 cycle
   \   0000A0 F6                    CLRW      AX                 ;; 1 cycle
   \   0000A1 BC14                  MOVW      [HL+0x14], AX      ;; 1 cycle
    429              return error ;
   \   0000A3 63                    MOV       A, B               ;; 1 cycle
   \   0000A4 1004                  ADDW      SP, #0x4           ;; 1 cycle
   \   0000A6 D7                    RET                          ;; 6 cycles
   \   0000A7                       ; ------------------------------------- Block: 14 cycles
   \   0000A7                       ; ------------------------------------- Total: 149 cycles
   \   0000A7                       REQUIRE ?CLRL78_V1_0_L00
    430          }
    431          
    432          /******************************************************************************
    433          * ID : 39.0
    434          * Outline : ST7579_SetSystemBiasBooster
    435          * Include : ST7579_LCD.h
    436          * Function Name: ST7579_SetSystemBiasBooster
    437          * Description : Set the LCD system bias.  Below is a sample Bias chart.
    438          *
    439          * VDD2=2.4V                             Bias
    440          *             1/4     1/5     1/6     1/7       1/8     1/9     1/10    1/11
    441          * Booster X3  3~4.5   3~5.2   3.3~6.3 3.5~6     X       X       X       X
    442          * Booster X4  3~4.5   3~5.7   3.3~7.4 3.5~8.55  3.5~8.1 4~8.1   X       X
    443          * Booster X5  3~4.5   3~5.7   3.3~7.4 3.5~8.8   3.5~9.1 4~9.1 4.2~9.6 4.6~9.6
    444          *
    445          * X: Do not select this setting.
    446          * 
    447          * The bias setting will have to be set manually and permanently in this
    448          * function
    449          *
    450          * This function also sets booster efficiency.  The setting of booster
    451          * efficiency is hard programmed here and must be manually changed.
    452          * Efficiency is set at level 2.  The efficiency levels are:
    453          * for booster efficiency level 1: 0x9D, 0x9E, 0x9F
    454          * for booster efficiency level 2: 0x99, 0x9A, 0x9B
    455          * for booster efficiency level 3: 0x95, 0x96, 0x97
    456          * for booster efficiency level 4: 0x91, 0x92, 0x93
    457          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    458          *          : cValue0To17 - booster set value from 0 to 17 is valid.
    459          * Return Value : none
    460          * Calling Functions : ST7579_Write
    461          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    462          void ST7579_SetSystemBiasBooster(T_glyphHandle aHandle, int8_t cValue0To17)
   \                     ST7579_SetSystemBiasBooster:
    463          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
   \   000002 C1                    PUSH      AX                 ;; 1 cycle
   \   000003                       ; Auto size: 2
    464              T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
    465          
    466              if (cValue0To17 <= 17) {
   \   000003 63                    MOV       A, B               ;; 1 cycle
   \   000004 7C80                  XOR       A, #0x80           ;; 1 cycle
   \   000006 2C92                  SUB       A, #0x92           ;; 1 cycle
   \   000008 61C8                  SKC                          ;; 4 cycles
   \   00000A ED....                BR        N:??ST7579_SetLine_18  ;; 4 cycles
   \   00000D                       ; ------------------------------------- Block: 10 cycles
    467                  /* Select bias and boost settings from value */
    468                  char cBias = 0 ;
    469                  char cBoost = 0 ;
    470                  switch (cValue0To17) {
   \   00000D 63                    MOV       A, B               ;; 1 cycle
   \   00000E 36....                MOVW      HL, #LWRD(??ST7579_SetSystemBiasBooster_0)  ;; 1 cycle
   \   000011 41..                  MOV       ES, #BYTE3(??ST7579_SetSystemBiasBooster_0)  ;; 1 cycle
   \   000013 CEFC..                MOV       CS, #BYTE3(ST7579_SetSystemBiasBooster)  ;; 1 cycle
   \   000016 ED....                BR        N:?C_SSWITCH_L10   ;; 3 cycles
   \   000019                       ; ------------------------------------- Block: 7 cycles
    471                      case 0:
    472                          /* Bias level 1/4 Boost Times 3. */
    473                          cBias = 0x17 ;
   \                     ??ST7579_SetSystemBiasBooster_1:
   \   000019 5217                  MOV       C, #0x17           ;; 1 cycle
    474                          cBoost = 0x99 ;
   \   00001B EF46                  BR        S:??ST7579_SetLine_19  ;; 3 cycles
   \   00001D                       ; ------------------------------------- Block: 4 cycles
    475                          break ;
    476                      case 3:
    477                          /* Bias level 1/5 Boost Times 3. */
    478                          cBias = 0x16 ;
   \                     ??ST7579_SetSystemBiasBooster_2:
   \   00001D 5216                  MOV       C, #0x16           ;; 1 cycle
    479                          cBoost = 0x99 ;
   \   00001F EF42                  BR        S:??ST7579_SetLine_19  ;; 3 cycles
   \   000021                       ; ------------------------------------- Block: 4 cycles
    480                          break ;
    481                      case 6:
    482                          /* Bias level 1/6 Boost Times 3. */
    483                          cBias = 0x15 ;
   \                     ??ST7579_SetSystemBiasBooster_3:
   \   000021 5215                  MOV       C, #0x15           ;; 1 cycle
    484                          cBoost = 0x99 ;
   \   000023 EF3E                  BR        S:??ST7579_SetLine_19  ;; 3 cycles
   \   000025                       ; ------------------------------------- Block: 4 cycles
    485                          break ;
    486                      case 9:
    487                          /* Bias level 1/7 Boost Times 3. */
    488                          cBias = 0x14 ;
    489                          cBoost = 0x99 ;
    490                          break ;
    491                      case 1:
    492                          /* Bias level 1/4 Boost Times 4. */
    493                          cBias = 0x17 ;
   \                     ??ST7579_SetSystemBiasBooster_4:
   \   000025 5217                  MOV       C, #0x17           ;; 1 cycle
    494                          cBoost = 0x9A ;
   \   000027 EF12                  BR        S:??ST7579_SetLine_20  ;; 3 cycles
   \   000029                       ; ------------------------------------- Block: 4 cycles
    495                          break ;
    496                      case 4:
    497                          /* Bias level 1/5 Boost Times 4. */
    498                          cBias = 0x16 ;
   \                     ??ST7579_SetSystemBiasBooster_5:
   \   000029 5216                  MOV       C, #0x16           ;; 1 cycle
    499                          cBoost = 0x9A ;
   \   00002B EF0E                  BR        S:??ST7579_SetLine_20  ;; 3 cycles
   \   00002D                       ; ------------------------------------- Block: 4 cycles
    500                          break ;
    501                      case 7:
    502                          /* Bias level 1/6 Boost Times 4. */
    503                          cBias = 0x15 ;
   \                     ??ST7579_SetSystemBiasBooster_6:
   \   00002D 5215                  MOV       C, #0x15           ;; 1 cycle
    504                          cBoost = 0x9A ;
   \   00002F EF0A                  BR        S:??ST7579_SetLine_20  ;; 3 cycles
   \   000031                       ; ------------------------------------- Block: 4 cycles
    505                          break ;
    506                      case 10:
    507                          /* Bias level 1/7 Boost Times 4. */
    508                          cBias = 0x14 ;
   \                     ??ST7579_SetSystemBiasBooster_7:
   \   000031 5214                  MOV       C, #0x14           ;; 1 cycle
    509                          cBoost = 0x9A ;
   \   000033 EF06                  BR        S:??ST7579_SetLine_20  ;; 3 cycles
   \   000035                       ; ------------------------------------- Block: 4 cycles
    510                          break ;
    511                      case 12:
    512                          /* Bias level 1/8 Boost Times 4. */
    513                          cBias = 0x13 ;
   \                     ??ST7579_SetSystemBiasBooster_8:
   \   000035 5213                  MOV       C, #0x13           ;; 1 cycle
    514                          cBoost = 0x9A ;
   \   000037 EF02                  BR        S:??ST7579_SetLine_20  ;; 3 cycles
   \   000039                       ; ------------------------------------- Block: 4 cycles
    515                          break ;
    516                      case 14:
    517                          /* Bias level 1/9 Boost Times 4. */
    518                          cBias = 0x12 ;
   \                     ??ST7579_SetSystemBiasBooster_9:
   \   000039 5212                  MOV       C, #0x12           ;; 1 cycle
    519                          cBoost = 0x9A ;
   \   00003B                       ; ------------------------------------- Block: 1 cycles
   \                     ??ST7579_SetLine_20:
   \   00003B 539A                  MOV       B, #0x9A           ;; 1 cycle
    520                          break ;
   \   00003D EF26                  BR        S:??ST7579_SetLine_21  ;; 3 cycles
   \   00003F                       ; ------------------------------------- Block: 4 cycles
    521                      case 2:
    522                          /* Bias level 1/4 Boost Times 5. */
    523                          cBias = 0x17 ;
   \                     ??ST7579_SetSystemBiasBooster_10:
   \   00003F 5217                  MOV       C, #0x17           ;; 1 cycle
    524                          cBoost = 0x9B ;
   \   000041 EF1A                  BR        S:??ST7579_SetLine_22  ;; 3 cycles
   \   000043                       ; ------------------------------------- Block: 4 cycles
    525                          break ;
    526                      case 5:
    527                          /* Bias level 1/5 Boost Times 5. */
    528                          cBias = 0x16 ;
   \                     ??ST7579_SetSystemBiasBooster_11:
   \   000043 5216                  MOV       C, #0x16           ;; 1 cycle
    529                          cBoost = 0x9B ;
   \   000045 EF16                  BR        S:??ST7579_SetLine_22  ;; 3 cycles
   \   000047                       ; ------------------------------------- Block: 4 cycles
    530                          break ;
    531                      case 8:
    532                          /* Bias level 1/6 Boost Times 5. */
    533                          cBias = 0x15 ;
   \                     ??ST7579_SetSystemBiasBooster_12:
   \   000047 5215                  MOV       C, #0x15           ;; 1 cycle
    534                          cBoost = 0x9B ;
   \   000049 EF12                  BR        S:??ST7579_SetLine_22  ;; 3 cycles
   \   00004B                       ; ------------------------------------- Block: 4 cycles
    535                          break ;
    536                      case 11:
    537                          /* Bias level 1/7 Boost Times 5. */
    538                          cBias = 0x14 ;
   \                     ??ST7579_SetSystemBiasBooster_13:
   \   00004B 5214                  MOV       C, #0x14           ;; 1 cycle
    539                          cBoost = 0x9B ;
   \   00004D EF0E                  BR        S:??ST7579_SetLine_22  ;; 3 cycles
   \   00004F                       ; ------------------------------------- Block: 4 cycles
    540                          break ;
    541                      case 13:
    542                          /* Bias level 1/8 Boost Times 5. */
    543                          cBias = 0x13 ;
   \                     ??ST7579_SetSystemBiasBooster_14:
   \   00004F 5213                  MOV       C, #0x13           ;; 1 cycle
    544                          cBoost = 0x9B ;
   \   000051 EF0A                  BR        S:??ST7579_SetLine_22  ;; 3 cycles
   \   000053                       ; ------------------------------------- Block: 4 cycles
    545                          break ;
    546                      case 15:
    547                          /* Bias level 1/9 Boost Times 5. */
    548                          cBias = 0x12 ;
   \                     ??ST7579_SetSystemBiasBooster_15:
   \   000053 5212                  MOV       C, #0x12           ;; 1 cycle
    549                          cBoost = 0x9B ;
   \   000055 EF06                  BR        S:??ST7579_SetLine_22  ;; 3 cycles
   \   000057                       ; ------------------------------------- Block: 4 cycles
    550                          break ;
    551                      case 16:
    552                          /* Bias level 1/10 Boost Times 5. */
    553                          cBias = 0x11 ;
   \                     ??ST7579_SetSystemBiasBooster_16:
   \   000057 5211                  MOV       C, #0x11           ;; 1 cycle
    554                          cBoost = 0x9B ;
   \   000059 EF02                  BR        S:??ST7579_SetLine_22  ;; 3 cycles
   \   00005B                       ; ------------------------------------- Block: 4 cycles
    555                          break ;
    556                      case 17:
    557                          /* Bias level 1/11 Boost Times 5. */
    558                          cBias = 0x10 ;
   \                     ??ST7579_SetSystemBiasBooster_17:
   \   00005B 5210                  MOV       C, #0x10           ;; 1 cycle
    559                          cBoost = 0x9B ;
   \   00005D                       ; ------------------------------------- Block: 1 cycles
   \                     ??ST7579_SetLine_22:
   \   00005D 539B                  MOV       B, #0x9B           ;; 1 cycle
    560                          break ;
   \   00005F EF04                  BR        S:??ST7579_SetLine_21  ;; 3 cycles
   \   000061                       ; ------------------------------------- Block: 4 cycles
    561                      default:
    562                          /* Bias level 7 Boost Times 3. */
    563                          cBias = 0x14 ;
   \                     ??ST7579_SetSystemBiasBooster_18:
   \   000061 5214                  MOV       C, #0x14           ;; 1 cycle
    564                          cBoost = 0x99 ;
   \   000063                       ; ------------------------------------- Block: 1 cycles
   \                     ??ST7579_SetLine_19:
   \   000063 5399                  MOV       B, #0x99           ;; 1 cycle
    565                          break ;
   \   000065                       ; ------------------------------------- Block: 1 cycles
   \                     ??ST7579_SetLine_21:
   \   000065 5129                  MOV       A, #0x29           ;; 1 cycle
   \   000067 C1                    PUSH      AX                 ;; 1 cycle
   \   000068 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00006A 16                    MOVW      HL, AX             ;; 1 cycle
   \   00006B AC02                  MOVW      AX, [HL+0x02]      ;; 1 cycle
    566                  }
   \   00006D FD....                CALL      N:??Subroutine16_0  ;; 3 cycles
   \   000070                       ; ------------------------------------- Block: 8 cycles
   \                     ??CrossCallReturnLabel_71:
   \   000070 8801                  MOV       A, [SP+0x01]       ;; 1 cycle
   \   000072 1002                  ADDW      SP, #0x2           ;; 1 cycle
    567          
    568                  /* Set Bias */
    569                  /* Use Function Set 1 H[1:0]=(0,1) */
    570                  /* Original Development hardcoded this as CommandSend(0x021) */
    571                  p_gw->iCommAPI->iCommandSend(LCD_FUNCTION_ONE) ;
   \   000074 61EA                  CALL      DE                 ;; 3 cycles
    572                  p_gw->iCommAPI->iCommandSend(cBias) ;
   \   000076 62                    MOV       A, C               ;; 1 cycle
   \   000077 16                    MOVW      HL, AX             ;; 1 cycle
   \   000078 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00007A FD....                CALL      N:?Subroutine11    ;; 3 cycles
   \   00007D                       ; ------------------------------------- Block: 11 cycles
   \                     ??CrossCallReturnLabel_21:
   \   00007D C5                    PUSH      DE                 ;; 1 cycle
   \   00007E C6                    POP       HL                 ;; 1 cycle
   \   00007F FD....                CALL      N:?Subroutine9     ;; 3 cycles
   \   000082                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_63:
   \   000082 61EA                  CALL      DE                 ;; 3 cycles
    573          
    574                  /* Set Booster */
    575                  /* Use Function Set 3 H[1:0]=(1,1) */
    576                  /* Original Development hardcoded this as CommandSend(0x023) */
    577                  p_gw->iCommAPI->iCommandSend(LCD_FUNCTION_THREE) ;
   \   000084 512B                  MOV       A, #0x2B           ;; 1 cycle
   \   000086 16                    MOVW      HL, AX             ;; 1 cycle
   \   000087 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000089 FD....                CALL      N:?Subroutine11    ;; 3 cycles
   \   00008C                       ; ------------------------------------- Block: 9 cycles
   \                     ??CrossCallReturnLabel_22:
   \   00008C C5                    PUSH      DE                 ;; 1 cycle
   \   00008D C6                    POP       HL                 ;; 1 cycle
   \   00008E FD....                CALL      N:?Subroutine9     ;; 3 cycles
   \   000091                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_64:
   \   000091 61EA                  CALL      DE                 ;; 3 cycles
    578                  /* Set default efficiency and multiplyer on voltage */
    579                  p_gw->iCommAPI->iCommandSend(cBoost) ;
   \   000093 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000095 FD....                CALL      N:?Subroutine2     ;; 3 cycles
   \   000098                       ; ------------------------------------- Block: 7 cycles
    580              }
   \                     ??CrossCallReturnLabel_0:
   \   000098 61EA                  CALL      DE                 ;; 3 cycles
   \   00009A                       ; ------------------------------------- Block: 3 cycles
    581          }
   \                     ??ST7579_SetLine_18:
   \   00009A                       REQUIRE ?CLRL78_V1_0_L00
   \   00009A                       REQUIRE ?Subroutine1
   \   00009A                       ; // Fall through to label ?Subroutine1

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000 1002                  ADDW      SP, #0x2           ;; 1 cycle
   \   000002 C4                    POP       DE                 ;; 1 cycle
   \   000003 C2                    POP       BC                 ;; 1 cycle
   \   000004 D7                    RET                          ;; 6 cycles
   \   000005                       ; ------------------------------------- Block: 9 cycles
   \   000005                       ; ------------------------------------- Total: 9 cycles
   \   000005                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000 37                    XCHW      AX, HL             ;; 1 cycle
   \   000001 14                    MOVW      DE, AX             ;; 1 cycle
   \   000002 AC02                  MOVW      AX, [HL+0x02]      ;; 1 cycle
   \   000004 35                    XCHW      AX, DE             ;; 1 cycle
   \   000005 D7                    RET                          ;; 6 cycles
   \   000006                       ; ------------------------------------- Block: 10 cycles
   \   000006                       ; ------------------------------------- Total: 10 cycles
   \   000006                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000 14                    MOVW      DE, AX             ;; 1 cycle
   \   000001 AC02                  MOVW      AX, [HL+0x02]      ;; 1 cycle
   \   000003 ED....                BR        N:?Subroutine15    ;; 3 cycles
   \   000006                       ; ------------------------------------- Block: 5 cycles
   \   000006                       ; ------------------------------------- Total: 5 cycles
   \   000006                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000 16                    MOVW      HL, AX             ;; 1 cycle
   \   000001 AC02                  MOVW      AX, [HL+0x02]      ;; 1 cycle
   \   000003 16                    MOVW      HL, AX             ;; 1 cycle
   \   000004 AC02                  MOVW      AX, [HL+0x02]      ;; 1 cycle
   \   000006 14                    MOVW      DE, AX             ;; 1 cycle
   \   000007 CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   00000A 63                    MOV       A, B               ;; 1 cycle
   \   00000B D7                    RET                          ;; 6 cycles
   \   00000C                       ; ------------------------------------- Block: 13 cycles
   \   00000C                       ; ------------------------------------- Total: 13 cycles
   \   00000C                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ??Subroutine16_0:
   \   000000 16                    MOVW      HL, AX             ;; 1 cycle
   \   000001 AC02                  MOVW      AX, [HL+0x02]      ;; 1 cycle
   \   000003 14                    MOVW      DE, AX             ;; 1 cycle
   \   000004 CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   000007 D7                    RET                          ;; 6 cycles
   \   000008                       ; ------------------------------------- Block: 10 cycles
   \   000008                       ; ------------------------------------- Total: 10 cycles
   \   000008                       REQUIRE ?CLRL78_V1_0_L00
    582          
    583          /******************************************************************************
    584          * ID : 40.0
    585          * Outline : ST7579_SetVO_Range
    586          * Include : ST7579_LCD.h
    587          * Function Name: ST7579_SetVO_Range
    588          * Description : Set the LCD VO Range.  VO is used as a Contrast Control for the LCD
    589          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    590          *          : nValue0to254 - contrast set value from 0 to 254 is valid.
    591          * Return Value : none
    592          * Calling Functions : ST7579_Write
    593          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    594          void ST7579_SetVO_Range(T_glyphHandle aHandle, int16_t nValue0to254)
   \                     ST7579_SetVO_Range:
    595          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001 C1                    PUSH      AX                 ;; 1 cycle
   \   000002                       ; Auto size: 4
   \   000002 C1                    PUSH      AX                 ;; 1 cycle
    596              T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
    597          
    598              if (nValue0to254 <= 254) {
   \   000003 13                    MOVW      AX, BC             ;; 1 cycle
   \   000004 7C80                  XOR       A, #0x80           ;; 1 cycle
   \   000006 44FF80                CMPW      AX, #0x80FF        ;; 1 cycle
   \   000009 DE68                  BNC       ??ST7579_SetLine_23  ;; 4 cycles
   \   00000B                       ; ------------------------------------- Block: 10 cycles
    599                  char cByteToSend = 0 ;
    600                  char cLowHigh = 0 ;
   \   00000B F1                    CLRB      A                  ;; 1 cycle
   \   00000C 9800                  MOV       [SP], A            ;; 1 cycle
    601          
    602                  if (nValue0to254 > 127) {
   \   00000E 13                    MOVW      AX, BC             ;; 1 cycle
   \   00000F 7C80                  XOR       A, #0x80           ;; 1 cycle
   \   000011 448080                CMPW      AX, #0x8080        ;; 1 cycle
   \   000014 62                    MOV       A, C               ;; 1 cycle
   \   000015 DC0A                  BC        ??ST7579_SetLine_24  ;; 4 cycles
   \   000017                       ; ------------------------------------- Block: 10 cycles
    603                      cByteToSend = ((nValue0to254 - 127) | 0x80) & 0x00FF ;
   \   000017 0C81                  ADD       A, #0x81           ;; 1 cycle
   \   000019 6C80                  OR        A, #0x80           ;; 1 cycle
   \   00001B 73                    MOV       B, A               ;; 1 cycle
    604                      cLowHigh = 1 ;
   \   00001C E1                    ONEB      A                  ;; 1 cycle
   \   00001D 9800                  MOV       [SP], A            ;; 1 cycle
   \   00001F EF03                  BR        S:??ST7579_SetLine_25  ;; 3 cycles
   \   000021                       ; ------------------------------------- Block: 8 cycles
    605                  }
    606                  else {
    607                      cByteToSend = (nValue0to254 | 0x80) & 0x00FF ;
   \                     ??ST7579_SetLine_24:
   \   000021 6C80                  OR        A, #0x80           ;; 1 cycle
   \   000023 73                    MOV       B, A               ;; 1 cycle
   \   000024                       ; ------------------------------------- Block: 2 cycles
   \                     ??ST7579_SetLine_25:
   \   000024 5128                  MOV       A, #0x28           ;; 1 cycle
   \   000026 16                    MOVW      HL, AX             ;; 1 cycle
   \   000027 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
    608                  }
   \   000029 FD....                CALL      N:?Subroutine11    ;; 3 cycles
   \   00002C                       ; ------------------------------------- Block: 6 cycles
   \                     ??CrossCallReturnLabel_23:
   \   00002C C5                    PUSH      DE                 ;; 1 cycle
   \   00002D C6                    POP       HL                 ;; 1 cycle
   \   00002E FD....                CALL      N:?Subroutine9     ;; 3 cycles
   \   000031                       ; ------------------------------------- Block: 5 cycles
    609          
    610                  /* Use Function Set 0 H[1:0]=(0,0) */
    611                  /* Original Development hardcoded this as CommandSend(0x020) */
    612                  p_gw->iCommAPI->iCommandSend(LCD_FUNCTION_ZERO) ;
   \                     ??CrossCallReturnLabel_65:
   \   000031 61EA                  CALL      DE                 ;; 3 cycles
    613                  /* Set VO range to Low if 0x04 or High if 0x05 */
    614                  /* here low would be PRS=0 and high would be PRS=1 */
    615                  if (cLowHigh == 0) p_gw->iCommAPI->iCommandSend(0x04) ;
   \   000033 AEF8                  MOVW      AX, SP             ;; 1 cycle
   \   000035 16                    MOVW      HL, AX             ;; 1 cycle
   \   000036 31830F                BT        [HL].0, ??ST7579_SetLine_26  ;; 5 cycles
   \   000039                       ; ------------------------------------- Block: 10 cycles
   \   000039 5104                  MOV       A, #0x4            ;; 1 cycle
   \   00003B 16                    MOVW      HL, AX             ;; 1 cycle
   \   00003C A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00003E FD....                CALL      N:?Subroutine11    ;; 3 cycles
   \   000041                       ; ------------------------------------- Block: 6 cycles
   \                     ??CrossCallReturnLabel_24:
   \   000041 C5                    PUSH      DE                 ;; 1 cycle
   \   000042 C6                    POP       HL                 ;; 1 cycle
   \   000043 FD....                CALL      N:?Subroutine9     ;; 3 cycles
   \   000046                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_66:
   \   000046 61EA                  CALL      DE                 ;; 3 cycles
   \   000048                       ; ------------------------------------- Block: 3 cycles
    616                  if (cLowHigh == 1) p_gw->iCommAPI->iCommandSend(0x05) ;
   \                     ??ST7579_SetLine_26:
   \   000048 AEF8                  MOVW      AX, SP             ;; 1 cycle
   \   00004A 16                    MOVW      HL, AX             ;; 1 cycle
   \   00004B 31850F                BF        [HL].0, ??ST7579_SetLine_27  ;; 5 cycles
   \   00004E                       ; ------------------------------------- Block: 7 cycles
   \   00004E 5105                  MOV       A, #0x5            ;; 1 cycle
   \   000050 16                    MOVW      HL, AX             ;; 1 cycle
   \   000051 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000053 FD....                CALL      N:?Subroutine11    ;; 3 cycles
   \   000056                       ; ------------------------------------- Block: 6 cycles
   \                     ??CrossCallReturnLabel_25:
   \   000056 C5                    PUSH      DE                 ;; 1 cycle
   \   000057 C6                    POP       HL                 ;; 1 cycle
   \   000058 FD....                CALL      N:?Subroutine9     ;; 3 cycles
   \   00005B                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_67:
   \   00005B 61EA                  CALL      DE                 ;; 3 cycles
   \   00005D                       ; ------------------------------------- Block: 3 cycles
    617              
    618                  /* Use Function Set 1 H[1:0]=(0,1) */
    619                  /* Original Development hardcoded this as CommandSend(0x021) */
    620                  p_gw->iCommAPI->iCommandSend(LCD_FUNCTION_ONE) ;
   \                     ??ST7579_SetLine_27:
   \   00005D 5129                  MOV       A, #0x29           ;; 1 cycle
   \   00005F 16                    MOVW      HL, AX             ;; 1 cycle
   \   000060 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000062 FD....                CALL      N:?Subroutine11    ;; 3 cycles
   \   000065                       ; ------------------------------------- Block: 6 cycles
   \                     ??CrossCallReturnLabel_26:
   \   000065 C5                    PUSH      DE                 ;; 1 cycle
   \   000066 C6                    POP       HL                 ;; 1 cycle
   \   000067 FD....                CALL      N:?Subroutine9     ;; 3 cycles
   \   00006A                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_68:
   \   00006A 61EA                  CALL      DE                 ;; 3 cycles
    621                  /* Set PRS=0 to 2.94 V or PRS=1 2.95V to 6.75V */
    622                  /* the value here can be 0 to 127 or 0x00 to 0x7F */
    623                  p_gw->iCommAPI->iCommandSend(cByteToSend) ;
   \   00006C A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00006E FD....                CALL      N:?Subroutine2     ;; 3 cycles
   \   000071                       ; ------------------------------------- Block: 7 cycles
    624              }
   \                     ??CrossCallReturnLabel_1:
   \   000071 61EA                  CALL      DE                 ;; 3 cycles
   \   000073                       ; ------------------------------------- Block: 3 cycles
    625          }
   \                     ??ST7579_SetLine_23:
   \   000073 1004                  ADDW      SP, #0x4           ;; 1 cycle
   \   000075 C4                    POP       DE                 ;; 1 cycle
   \   000076 D7                    RET                          ;; 6 cycles
   \   000077                       ; ------------------------------------- Block: 8 cycles
   \   000077                       ; ------------------------------------- Total: 115 cycles
   \   000077                       REQUIRE ?CLRL78_V1_0_L00
    626          
    627          /******************************************************************************
    628          * ID : 41.0
    629          * Outline : ST7579_Config
    630          * Include : ST7579_LCD.h
    631          * Function Name: ST7579_Config
    632          * Description : Used to configure the LCD with preset settings.
    633          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    634          * Return Value : none
    635          * Calling Functions : ST7579_Open
    636          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    637          void ST7579_Config(T_glyphHandle aHandle)
   \                     ST7579_Config:
    638          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
   \   000002                       ; Auto size: 2
   \   000002 C1                    PUSH      AX                 ;; 1 cycle
   \   000003 14                    MOVW      DE, AX             ;; 1 cycle
    639              T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
    640              volatile int i = 0 ;
   \   000004 F6                    CLRW      AX                 ;; 1 cycle
   \   000005 B800                  MOVW      [SP], AX           ;; 1 cycle
    641          
    642              /* Inialize Display */
    643              ST7579_SetSystemBiasBooster(aHandle, p_gw->iLCDAPI->iContrastBoost) ;
   \   000007 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   000008 16                    MOVW      HL, AX             ;; 1 cycle
   \   000009 8C19                  MOV       A, [HL+0x19]       ;; 1 cycle
   \   00000B 73                    MOV       B, A               ;; 1 cycle
   \   00000C 15                    MOVW      AX, DE             ;; 1 cycle
   \   00000D FD....                CALL      ST7579_SetSystemBiasBooster  ;; 3 cycles
    644              ST7579_SetVO_Range(aHandle, p_gw->iLCDAPI->iContrast) ;
   \   000010 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   000011 16                    MOVW      HL, AX             ;; 1 cycle
   \   000012 8C18                  MOV       A, [HL+0x18]       ;; 1 cycle
   \   000014 72                    MOV       C, A               ;; 1 cycle
   \   000015 F3                    CLRB      B                  ;; 1 cycle
   \   000016 15                    MOVW      AX, DE             ;; 1 cycle
   \   000017 FD....                CALL      ST7579_SetVO_Range  ;; 3 cycles
    645              for (i=0;i<1000;i++){}
   \   00001A F6                    CLRW      AX                 ;; 1 cycle
   \   00001B EF03                  BR        S:??ST7579_SetLine_28  ;; 3 cycles
   \   00001D                       ; ------------------------------------- Block: 27 cycles
   \                     ??ST7579_Config_0:
   \   00001D A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00001F A1                    INCW      AX                 ;; 1 cycle
   \   000020                       ; ------------------------------------- Block: 2 cycles
   \                     ??ST7579_SetLine_28:
   \   000020 B800                  MOVW      [SP], AX           ;; 1 cycle
   \   000022 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000024 7C80                  XOR       A, #0x80           ;; 1 cycle
   \   000026 44E883                CMPW      AX, #0x83E8        ;; 1 cycle
   \   000029 DCF2                  BC        ??ST7579_Config_0  ;; 4 cycles
   \   00002B                       ; ------------------------------------- Block: 8 cycles
    646              ST7579_SetFrameRate(aHandle, p_gw->iLCDAPI->iFrameRate) ;
   \   00002B A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   00002C 16                    MOVW      HL, AX             ;; 1 cycle
   \   00002D 8C1A                  MOV       A, [HL+0x1A]       ;; 1 cycle
   \   00002F 72                    MOV       C, A               ;; 1 cycle
   \   000030 F3                    CLRB      B                  ;; 1 cycle
   \   000031 15                    MOVW      AX, DE             ;; 1 cycle
   \   000032 FD....                CALL      ST7579_SetFrameRate  ;; 3 cycles
    647              
    648              ST7579_SetPage(aHandle, 0) ;
   \   000035 F3                    CLRB      B                  ;; 1 cycle
   \   000036 15                    MOVW      AX, DE             ;; 1 cycle
   \   000037 FD....                CALL      ST7579_SetPage     ;; 3 cycles
    649              ST7579_SetChar(aHandle, 0) ;
   \   00003A F3                    CLRB      B                  ;; 1 cycle
   \   00003B 15                    MOVW      AX, DE             ;; 1 cycle
   \   00003C FD....                CALL      ST7579_SetChar     ;; 3 cycles
    650          }
   \   00003F ED....                BR        N:?Subroutine1     ;; 3 cycles
   \   000042                       ; ------------------------------------- Block: 22 cycles
   \   000042                       ; ------------------------------------- Total: 59 cycles
   \   000042                       REQUIRE ?CLRL78_V1_0_L00
    651          
    652          /******************************************************************************
    653          * ID : 42.0
    654          * Outline : ST7579_Send16bitsCommand
    655          * Include : ST7579_LCD.h
    656          * Function Name: ST7579_Send16bitsCommand
    657          * Description : Send 2 commands from the same integer.  For example:
    658          *                       if you wanted to send 0x28 and then 0xD0 just send
    659          *                       0x28D0 using this command.
    660          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    661          *          : nCommand - 2 commands to send.
    662          * Return Value : none
    663          * Calling Functions : none
    664          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    665          void ST7579_Send16bitsCommand(T_glyphHandle aHandle, int16_t nCommand)
   \                     ST7579_Send16bitsCommand:
    666          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001 C3                    PUSH      BC                 ;; 1 cycle
   \   000002                       ; Auto size: 2
   \   000002 14                    MOVW      DE, AX             ;; 1 cycle
    667              T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
    668              int8_t cCommandOne = (int8_t)((nCommand >> 8) & 0x00FF) ;
    669              int8_t cCommandTwo = (int8_t)(nCommand & 0x00FF) ;
    670          
    671              p_gw->iCommAPI->iCommandSend(cCommandOne) ;
   \   000003 13                    MOVW      AX, BC             ;; 1 cycle
   \   000004 318F                  SARW      AX, 0x8            ;; 1 cycle
   \   000006 60                    MOV       A, X               ;; 1 cycle
   \   000007 16                    MOVW      HL, AX             ;; 1 cycle
   \   000008 AA02                  MOVW      AX, [DE+0x02]      ;; 1 cycle
   \   00000A FD....                CALL      N:?Subroutine13    ;; 3 cycles
   \   00000D                       ; ------------------------------------- Block: 11 cycles
   \                     ??CrossCallReturnLabel_43:
   \   00000D 61DA                  CALL      BC                 ;; 3 cycles
    672              p_gw->iCommAPI->iCommandSend(cCommandTwo) ;
   \   00000F A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000011 60                    MOV       A, X               ;; 1 cycle
   \   000012 73                    MOV       B, A               ;; 1 cycle
   \   000013 AA02                  MOVW      AX, [DE+0x02]      ;; 1 cycle
   \   000015 FD....                CALL      N:??Subroutine16_0  ;; 3 cycles
   \   000018                       ; ------------------------------------- Block: 10 cycles
   \                     ??CrossCallReturnLabel_72:
   \   000018 63                    MOV       A, B               ;; 1 cycle
   \   000019                       ; ------------------------------------- Block: 1 cycles
   \   000019                       ; ------------------------------------- Total: 22 cycles
   \   000019                       REQUIRE ?CLRL78_V1_0_L00
   \   000019                       REQUIRE ?Subroutine0
   \   000019                       ; // Fall through to label ?Subroutine0
    673          }

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 61EA                  CALL      DE                 ;; 3 cycles
   \   000002 1002                  ADDW      SP, #0x2           ;; 1 cycle
   \   000004 C4                    POP       DE                 ;; 1 cycle
   \   000005 D7                    RET                          ;; 6 cycles
   \   000006                       ; ------------------------------------- Block: 11 cycles
   \   000006                       ; ------------------------------------- Total: 11 cycles
   \   000006                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000 37                    XCHW      AX, HL             ;; 1 cycle
   \   000001 12                    MOVW      BC, AX             ;; 1 cycle
   \   000002 AC02                  MOVW      AX, [HL+0x02]      ;; 1 cycle
   \   000004 33                    XCHW      AX, BC             ;; 1 cycle
   \   000005 CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   000008 D7                    RET                          ;; 6 cycles
   \   000009                       ; ------------------------------------- Block: 11 cycles
   \   000009                       ; ------------------------------------- Total: 11 cycles
   \   000009                       REQUIRE ?CLRL78_V1_0_L00
    674          
    675          /******************************************************************************
    676          * ID : 43.0
    677          * Outline : ST7579_Send8bitsData
    678          * Include : ST7579_LCD.h
    679          * Function Name: ST7579_Send8bitsData
    680          * Description : Send 8 bits of data to the LCD RAM at the current location.
    681          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    682          *          : cData - 8 bits of data to send.
    683          * Return Value : none
    684          * Calling Functions : none
    685          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    686          void ST7579_Send8bitsData(T_glyphHandle aHandle, int8_t cData)
   \                     ST7579_Send8bitsData:
    687          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001                       ; Auto size: 0
   \   000001 16                    MOVW      HL, AX             ;; 1 cycle
    688              T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
    689          
    690              p_gw->iCommAPI->iDataSend(cData) ;
   \   000002 AC02                  MOVW      AX, [HL+0x02]      ;; 1 cycle
   \   000004 16                    MOVW      HL, AX             ;; 1 cycle
   \   000005 AC04                  MOVW      AX, [HL+0x04]      ;; 1 cycle
   \   000007 14                    MOVW      DE, AX             ;; 1 cycle
   \   000008 CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   00000B 63                    MOV       A, B               ;; 1 cycle
   \   00000C 61EA                  CALL      DE                 ;; 3 cycles
    691          }
   \   00000E C4                    POP       DE                 ;; 1 cycle
   \   00000F D7                    RET                          ;; 6 cycles
   \   000010                       ; ------------------------------------- Block: 18 cycles
   \   000010                       ; ------------------------------------- Total: 18 cycles
   \   000010                       REQUIRE ?CLRL78_V1_0_L00
    692          
    693          /******************************************************************************
    694          * ID : 44.0
    695          * Outline : ST7579_SetFrameRate
    696          * Include : ST7579_LCD.h
    697          * Function Name: ST7579_SetFrameRate
    698          * Description : Set the Frame Rate to one of:
    699          * 55Hz
    700          * 65Hz
    701          * 68Hz
    702          * 70Hz
    703          * 73Hz
    704          * 76Hz
    705          * 80Hz
    706          * 137Hz
    707          * Currently set at 73 hertz.  Must be manually set and recompliled
    708          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    709          *          : nRate55To137 - Frame rate to set from 55 to 137 see above
    710          * Return Value : none
    711          * Calling Functions : ST7579_Config
    712          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    713          void ST7579_SetFrameRate(T_glyphHandle aHandle, int16_t nRate55To137)
   \                     ST7579_SetFrameRate:
    714          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001 C3                    PUSH      BC                 ;; 1 cycle
   \   000002                       ; Auto size: 2
   \   000002 14                    MOVW      DE, AX             ;; 1 cycle
    715              T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
    716          
    717              /* Use Function Set 3 H[1:0]=(1,1) */
    718              /* Original Development hardcoded this as CommandSend(0x023) */
    719              p_gw->iCommAPI->iCommandSend(LCD_FUNCTION_THREE) ;
   \   000003 A5                    INCW      DE                 ;; 1 cycle
   \   000004 A5                    INCW      DE                 ;; 1 cycle
   \   000005 512B                  MOV       A, #0x2B           ;; 1 cycle
   \   000007 16                    MOVW      HL, AX             ;; 1 cycle
   \   000008 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   000009 FD....                CALL      N:?Subroutine13    ;; 3 cycles
   \   00000C                       ; ------------------------------------- Block: 11 cycles
   \                     ??CrossCallReturnLabel_44:
   \   00000C 61DA                  CALL      BC                 ;; 3 cycles
    720          
    721              switch(nRate55To137) {
   \   00000E A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000010 243700                SUBW      AX, #0x37          ;; 1 cycle
   \   000013 DD20                  BZ        ??ST7579_SetLine_29  ;; 4 cycles
   \   000015                       ; ------------------------------------- Block: 9 cycles
   \   000015 240A00                SUBW      AX, #0xA           ;; 1 cycle
   \   000018 DD22                  BZ        ??ST7579_SetLine_30  ;; 4 cycles
   \   00001A                       ; ------------------------------------- Block: 5 cycles
   \   00001A 240300                SUBW      AX, #0x3           ;; 1 cycle
   \   00001D DD24                  BZ        ??ST7579_SetLine_31  ;; 4 cycles
   \   00001F                       ; ------------------------------------- Block: 5 cycles
   \   00001F 240200                SUBW      AX, #0x2           ;; 1 cycle
   \   000022 DD26                  BZ        ??ST7579_SetLine_32  ;; 4 cycles
   \   000024                       ; ------------------------------------- Block: 5 cycles
   \   000024 240600                SUBW      AX, #0x6           ;; 1 cycle
   \   000027 DD28                  BZ        ??ST7579_SetLine_33  ;; 4 cycles
   \   000029                       ; ------------------------------------- Block: 5 cycles
   \   000029 240400                SUBW      AX, #0x4           ;; 1 cycle
   \   00002C DD2A                  BZ        ??ST7579_SetLine_34  ;; 4 cycles
   \   00002E                       ; ------------------------------------- Block: 5 cycles
   \   00002E 243900                SUBW      AX, #0x39          ;; 1 cycle
   \   000031 DD2C                  BZ        ??ST7579_SetLine_35  ;; 4 cycles
   \   000033                       ; ------------------------------------- Block: 5 cycles
   \   000033 EF31                  BR        S:??ST7579_SetLine_36  ;; 3 cycles
   \   000035                       ; ------------------------------------- Block: 3 cycles
    722                  case 55:
    723                      /* Set frame rate of 55 */
    724                      p_gw->iCommAPI->iCommandSend(0x08) ;
   \                     ??ST7579_SetLine_29:
   \   000035 FD....                CALL      N:?Subroutine3     ;; 3 cycles
   \   000038                       ; ------------------------------------- Block: 3 cycles
   \                     ??CrossCallReturnLabel_74:
   \   000038 5108                  MOV       A, #0x8            ;; 1 cycle
   \   00003A EF2F                  BR        S:??ST7579_SetLine_37  ;; 3 cycles
   \   00003C                       ; ------------------------------------- Block: 4 cycles
    725                      break ;
    726                  case 65:
    727                      /* Set frame rate of 65 */
    728                      p_gw->iCommAPI->iCommandSend(0x09) ;
   \                     ??ST7579_SetLine_30:
   \   00003C FD....                CALL      N:?Subroutine3     ;; 3 cycles
   \   00003F                       ; ------------------------------------- Block: 3 cycles
   \                     ??CrossCallReturnLabel_75:
   \   00003F 5109                  MOV       A, #0x9            ;; 1 cycle
   \   000041 EF28                  BR        S:??ST7579_SetLine_37  ;; 3 cycles
   \   000043                       ; ------------------------------------- Block: 4 cycles
    729                      break ;
    730                  case 68:
    731                      /* Set frame rate of 68 */
    732                      p_gw->iCommAPI->iCommandSend(0x0A) ;
   \                     ??ST7579_SetLine_31:
   \   000043 FD....                CALL      N:?Subroutine3     ;; 3 cycles
   \   000046                       ; ------------------------------------- Block: 3 cycles
   \                     ??CrossCallReturnLabel_76:
   \   000046 510A                  MOV       A, #0xA            ;; 1 cycle
   \   000048 EF21                  BR        S:??ST7579_SetLine_37  ;; 3 cycles
   \   00004A                       ; ------------------------------------- Block: 4 cycles
    733                      break ;
    734                  case 70:
    735                      /* Set frame rate of 70 */
    736                      p_gw->iCommAPI->iCommandSend(0x0B) ;
   \                     ??ST7579_SetLine_32:
   \   00004A FD....                CALL      N:?Subroutine3     ;; 3 cycles
   \   00004D                       ; ------------------------------------- Block: 3 cycles
   \                     ??CrossCallReturnLabel_77:
   \   00004D 510B                  MOV       A, #0xB            ;; 1 cycle
   \   00004F EF1A                  BR        S:??ST7579_SetLine_37  ;; 3 cycles
   \   000051                       ; ------------------------------------- Block: 4 cycles
    737                      break ;
    738                  case 73:
    739                      /* Set frame rate of 73(Default) */
    740                      p_gw->iCommAPI->iCommandSend(0x0C) ;
    741                      break ;
    742                  case 76:
    743                      /* Set frame rate of 76 */
    744                      p_gw->iCommAPI->iCommandSend(0x0D) ;
   \                     ??ST7579_SetLine_33:
   \   000051 FD....                CALL      N:?Subroutine3     ;; 3 cycles
   \   000054                       ; ------------------------------------- Block: 3 cycles
   \                     ??CrossCallReturnLabel_78:
   \   000054 510D                  MOV       A, #0xD            ;; 1 cycle
   \   000056 EF13                  BR        S:??ST7579_SetLine_37  ;; 3 cycles
   \   000058                       ; ------------------------------------- Block: 4 cycles
    745                      break ;
    746                  case 80:
    747                      /* Set frame rate of 80 */
    748                      p_gw->iCommAPI->iCommandSend(0x0E) ;
   \                     ??ST7579_SetLine_34:
   \   000058 FD....                CALL      N:?Subroutine3     ;; 3 cycles
   \   00005B                       ; ------------------------------------- Block: 3 cycles
   \                     ??CrossCallReturnLabel_79:
   \   00005B 510E                  MOV       A, #0xE            ;; 1 cycle
   \   00005D EF0C                  BR        S:??ST7579_SetLine_37  ;; 3 cycles
   \   00005F                       ; ------------------------------------- Block: 4 cycles
    749                      break ;
    750                  case 137:
    751                      /* Set frame rate of 137 */
    752                      p_gw->iCommAPI->iCommandSend(0x0F) ;
   \                     ??ST7579_SetLine_35:
   \   00005F FD....                CALL      N:?Subroutine3     ;; 3 cycles
   \   000062                       ; ------------------------------------- Block: 3 cycles
   \                     ??CrossCallReturnLabel_80:
   \   000062 510F                  MOV       A, #0xF            ;; 1 cycle
   \   000064 EF05                  BR        S:??ST7579_SetLine_37  ;; 3 cycles
   \   000066                       ; ------------------------------------- Block: 4 cycles
    753                      break ;
    754                  default:
    755                      /* Set frame rate of 73(Default) */
    756                      p_gw->iCommAPI->iCommandSend(0x0C) ;
   \                     ??ST7579_SetLine_36:
   \   000066 FD....                CALL      N:?Subroutine3     ;; 3 cycles
   \   000069                       ; ------------------------------------- Block: 3 cycles
    757              }
   \                     ??CrossCallReturnLabel_81:
   \   000069 510C                  MOV       A, #0xC            ;; 1 cycle
   \   00006B                       ; ------------------------------------- Block: 1 cycles
   \                     ??ST7579_SetLine_37:
   \   00006B ED....                BR        N:?Subroutine0     ;; 3 cycles
   \   00006E                       ; ------------------------------------- Block: 3 cycles
   \   00006E                       ; ------------------------------------- Total: 109 cycles
   \   00006E                       REQUIRE ?CLRL78_V1_0_L00
    758          }

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   000001                       ; ------------------------------------- Block: 1 cycles
   \   000001                       ; ------------------------------------- Total: 1 cycles
   \   000001                       REQUIRE ?CLRL78_V1_0_L00
   \   000001                       REQUIRE ??Subroutine16_0
   \   000001                       ; // Fall through to label ??Subroutine16_0
    759          
    760          /******************************************************************************
    761          * ID : 45.0
    762          * Outline : ST7579_SetPage
    763          * Include : ST7579_LCD.h
    764          * Function Name: ST7579_SetPage
    765          * Description : Set the current page to the current set of 8 rows where:
    766          *                   page 0 is row 0 to 7
    767          *                   page 1 is row 8 to 15
    768          *                   page 2 is row 16 to 23
    769          *                   page 3 is row 24 to 31
    770          *                   page 4 is row 32 to 39
    771          *                   page 5 is row 40 to 47
    772          *                   page 6 is row 48 to 55
    773          *                   page 7 is row 56 to 63
    774          *                   page 8 is row 64, 65, 66
    775          *                   page 9 is row 67
    776          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    777          *          : cValue0To9 - page number to set valid from 0 to 9.
    778          * Return Value : none
    779          * Calling Functions : ST7579_Write
    780          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    781          void ST7579_SetPage(T_glyphHandle aHandle, int8_t cValue0To9)
   \                     ST7579_SetPage:
    782          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001 C1                    PUSH      AX                 ;; 1 cycle
   \   000002                       ; Auto size: 2
    783              T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
    784              char cValueToSend = cValue0To9 | 0x40 ;
    785          
    786              if (cValue0To9 <= 9) {
   \   000002 63                    MOV       A, B               ;; 1 cycle
   \   000003 7C80                  XOR       A, #0x80           ;; 1 cycle
   \   000005 2C8A                  SUB       A, #0x8A           ;; 1 cycle
   \   000007 DE1C                  BNC       ??ST7579_SetLine_38  ;; 4 cycles
   \   000009                       ; ------------------------------------- Block: 9 cycles
    787                  cValueToSend &= 0x4F ;
    788              
    789                  /* Use Function Set 0 H[1:0]=(0,0) */
    790                  /* Original Development hardcoded this as CommandSend(0x020) */
    791                  p_gw->iCommAPI->iCommandSend(LCD_FUNCTION_ZERO) ;
   \   000009 5128                  MOV       A, #0x28           ;; 1 cycle
   \   00000B 16                    MOVW      HL, AX             ;; 1 cycle
   \   00000C A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00000E FD....                CALL      N:?Subroutine11    ;; 3 cycles
   \   000011                       ; ------------------------------------- Block: 6 cycles
   \                     ??CrossCallReturnLabel_27:
   \   000011 C5                    PUSH      DE                 ;; 1 cycle
   \   000012 C6                    POP       HL                 ;; 1 cycle
   \   000013 FD....                CALL      N:?Subroutine9     ;; 3 cycles
   \   000016                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_69:
   \   000016 61EA                  CALL      DE                 ;; 3 cycles
    792                  /* Set Ram Page of 0 to 9 where 0x40 is 0 and 0x49 is nine */
    793                  p_gw->iCommAPI->iCommandSend(cValueToSend) ;
   \   000018 63                    MOV       A, B               ;; 1 cycle
   \   000019 5C4F                  AND       A, #0x4F           ;; 1 cycle
   \   00001B 6C40                  OR        A, #0x40           ;; 1 cycle
   \   00001D 73                    MOV       B, A               ;; 1 cycle
   \   00001E A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000020 FD....                CALL      N:?Subroutine2     ;; 3 cycles
   \   000023                       ; ------------------------------------- Block: 11 cycles
    794              }
   \                     ??CrossCallReturnLabel_2:
   \   000023 61EA                  CALL      DE                 ;; 3 cycles
   \   000025                       ; ------------------------------------- Block: 3 cycles
    795          }
   \                     ??ST7579_SetLine_38:
   \   000025 1002                  ADDW      SP, #0x2           ;; 1 cycle
   \   000027 C4                    POP       DE                 ;; 1 cycle
   \   000028 D7                    RET                          ;; 6 cycles
   \   000029                       ; ------------------------------------- Block: 8 cycles
   \   000029                       ; ------------------------------------- Total: 42 cycles
   \   000029                       REQUIRE ?CLRL78_V1_0_L00
    796          
    797          /******************************************************************************
    798          * ID : 46.0
    799          * Outline : ST7579_SetChar
    800          * Include : ST7579_LCD.h
    801          * Function Name: ST7579_SetChar
    802          * Description : Set the current column of the current page that the next batch of
    803          * data will write to.
    804          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    805          *          : cValue0To101 - column number to set valid from 0 to 101.
    806          * Return Value : none
    807          * Calling Functions : ST7579_Write
    808          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    809          void ST7579_SetChar(T_glyphHandle aHandle, int8_t cValue0To101)
   \                     ST7579_SetChar:
    810          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001 C1                    PUSH      AX                 ;; 1 cycle
   \   000002                       ; Auto size: 2
    811              T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
    812              char cValueToSend = cValue0To101 | 0x80 ;
    813              
    814              if (cValue0To101 <= 101) {
   \   000002 63                    MOV       A, B               ;; 1 cycle
   \   000003 7C80                  XOR       A, #0x80           ;; 1 cycle
   \   000005 2CE6                  SUB       A, #0xE6           ;; 1 cycle
   \   000007 DE1A                  BNC       ??ST7579_SetLine_39  ;; 4 cycles
   \   000009                       ; ------------------------------------- Block: 9 cycles
    815                  cValueToSend &= 0xFF ;
    816              
    817                  /* Use Function Set 0 H[1:0]=(0,0) */
    818                  /* Original Development hardcoded this as CommandSend(0x020) */
    819                  p_gw->iCommAPI->iCommandSend(LCD_FUNCTION_ZERO) ;
   \   000009 5128                  MOV       A, #0x28           ;; 1 cycle
   \   00000B 16                    MOVW      HL, AX             ;; 1 cycle
   \   00000C A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00000E FD....                CALL      N:?Subroutine11    ;; 3 cycles
   \   000011                       ; ------------------------------------- Block: 6 cycles
   \                     ??CrossCallReturnLabel_28:
   \   000011 C5                    PUSH      DE                 ;; 1 cycle
   \   000012 C6                    POP       HL                 ;; 1 cycle
   \   000013 FD....                CALL      N:?Subroutine9     ;; 3 cycles
   \   000016                       ; ------------------------------------- Block: 5 cycles
   \                     ??CrossCallReturnLabel_70:
   \   000016 61EA                  CALL      DE                 ;; 3 cycles
    820                  /* Set Ram Page of 0 to 9 where 0x40 is 0 and 0x49 is nine */
    821                  p_gw->iCommAPI->iCommandSend(cValueToSend) ;
   \   000018 63                    MOV       A, B               ;; 1 cycle
   \   000019 6C80                  OR        A, #0x80           ;; 1 cycle
   \   00001B 73                    MOV       B, A               ;; 1 cycle
   \   00001C A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00001E FD....                CALL      N:?Subroutine2     ;; 3 cycles
   \   000021                       ; ------------------------------------- Block: 10 cycles
    822              }
   \                     ??CrossCallReturnLabel_3:
   \   000021 61EA                  CALL      DE                 ;; 3 cycles
   \   000023                       ; ------------------------------------- Block: 3 cycles
    823          }
   \                     ??ST7579_SetLine_39:
   \   000023 1002                  ADDW      SP, #0x2           ;; 1 cycle
   \   000025 C4                    POP       DE                 ;; 1 cycle
   \   000026 D7                    RET                          ;; 6 cycles
   \   000027                       ; ------------------------------------- Block: 8 cycles
   \   000027                       ; ------------------------------------- Total: 41 cycles
   \   000027                       REQUIRE ?CLRL78_V1_0_L00
    824          
    825          /******************************************************************************
    826          * ID : 47.0
    827          * Outline : ST7579_SetLine
    828          * Include : ST7579_LCD.h
    829          * Function Name: ST7579_SetLine
    830          * Description : Set the current line to become the top line of the LCD Display.
    831          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    832          *          : cValue0To66 - line number to set valid from 0 to 66.
    833          * Return Value : none
    834          * Calling Functions : ST7579_Write
    835          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    836          void ST7579_SetLine(T_glyphHandle aHandle, int8_t cValue0To66)
   \                     ST7579_SetLine:
    837          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
   \   000002 C1                    PUSH      AX                 ;; 1 cycle
   \   000003 C3                    PUSH      BC                 ;; 1 cycle
   \   000004                       ; Auto size: 4
    838              T_glyphWorkspace *p_gw = (T_glyphWorkspace *)aHandle;
    839          
    840              if (cValue0To66 <= 66) {
   \   000004 8801                  MOV       A, [SP+0x01]       ;; 1 cycle
   \   000006 7C80                  XOR       A, #0x80           ;; 1 cycle
   \   000008 2CC3                  SUB       A, #0xC3           ;; 1 cycle
   \   00000A DE5E                  BNC       ??ST7579_SetLine_40  ;; 4 cycles
   \   00000C                       ; ------------------------------------- Block: 11 cycles
    841                  int8_t cData[10] = "" ;
    842                  int8_t cValueToSendLow = 0 ;
    843                  int8_t cValueToSendHigh = 0 ;
    844              
    845                  cData[0] = 0 ;
    846                  cData[1] = 0 ;
    847                  cData[2] = 0 ;
    848                  cData[3] = 0 ;
    849                  cData[4] = 0 ;
    850                  cData[5] = 0 ;
    851                  cData[6] = 0 ;
    852              
    853                  /*  binary 1111 1111 becomes 0000 0001 */
    854                  cData[0] = 0x01 & cValue0To66 ;
    855                  /*  binary 1111 1111 becomes 0000 0010 */
    856                  cData[1] = 0x02 & cValue0To66 ;
    857                  /*  binary 1111 1111 becomes 0000 0100 */
    858                  cData[2] = 0x04 & cValue0To66 ;
    859                  /*  binary 1111 1111 becomes 0000 1000 */
    860                  cData[3] = 0x08 & cValue0To66 ;
    861                  /* binary 1111 1111 becomes 0001 0000 */
    862                  cData[4] = 0x010 & cValue0To66 ;
    863                  /* binary 1111 1111 becomes 0010 0000 */
    864                  cData[5] = 0x020 & cValue0To66 ;
    865                  /* binary 1111 1111 becomes 0100 0000 */
    866                  cData[6] = 0x040 & cValue0To66 ;
    867              
    868                  /* binary 10 becomes binary 1 */
    869                  cData[1] = cData[1] >> 1 ;
    870                  /* binary 100 becomes binary 1 */
    871                  cData[2] = cData[2] >> 2 ;
    872                  /* binary 1000 becomes binary 1 */
    873                  cData[3] = cData[3] >> 3 ;
    874                  /* binary 1 0000 becomes binary 1 */
    875                  cData[4] = cData[4] >> 4 ;
    876                  /* binary 10 0000 becomes binary 1 */
    877                  cData[5] = cData[5] >> 5 ;
    878                  /* binary 100 0000 becomes binary 1 */
    879                  cData[6] = cData[6] >> 6 ;
    880              
    881                  cValueToSendLow = cData[6] | 0x04 ;
    882                  cValueToSendHigh = cData[0] | cData[1] | cData[2] | cData[3] | cData[4] | cData[5] | 0x040 ;
    883          
    884                  /* Use Function Set 1 H[1:0]=(0,1) */
    885                  /* Original Development hardcoded this as CommandSend(0x021) */
    886                  p_gw->iCommAPI->iCommandSend(LCD_FUNCTION_ONE) ;
   \   00000C A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00000E 16                    MOVW      HL, AX             ;; 1 cycle
   \   00000F AC02                  MOVW      AX, [HL+0x02]      ;; 1 cycle
   \   000011 FD....                CALL      N:??Subroutine16_0  ;; 3 cycles
   \   000014                       ; ------------------------------------- Block: 6 cycles
   \                     ??CrossCallReturnLabel_73:
   \   000014 5129                  MOV       A, #0x29           ;; 1 cycle
   \   000016 61EA                  CALL      DE                 ;; 3 cycles
    887          
    888                  /* Set Ram Start Line of 0 to 66 using a high and low value and two command sends */
    889                  p_gw->iCommAPI->iCommandSend(cValueToSendHigh) ;
   \   000018 FBF8FF                MOVW      HL, SP             ;; 1 cycle
   \   00001B A7                    INCW      HL                 ;; 1 cycle
   \   00001C F1                    CLRB      A                  ;; 1 cycle
   \   00001D 71D4                  MOV1      CY, [HL].5         ;; 1 cycle
   \   00001F 6131                  SUBC      A, A               ;; 1 cycle
   \   000021 73                    MOV       B, A               ;; 1 cycle
   \   000022 F1                    CLRB      A                  ;; 1 cycle
   \   000023 71C4                  MOV1      CY, [HL].4         ;; 1 cycle
   \   000025 6131                  SUBC      A, A               ;; 1 cycle
   \   000027 72                    MOV       C, A               ;; 1 cycle
   \   000028 F1                    CLRB      A                  ;; 1 cycle
   \   000029 71B4                  MOV1      CY, [HL].3         ;; 1 cycle
   \   00002B 6131                  SUBC      A, A               ;; 1 cycle
   \   00002D 75                    MOV       D, A               ;; 1 cycle
   \   00002E F1                    CLRB      A                  ;; 1 cycle
   \   00002F 71A4                  MOV1      CY, [HL].2         ;; 1 cycle
   \   000031 6131                  SUBC      A, A               ;; 1 cycle
   \   000033 70                    MOV       X, A               ;; 1 cycle
   \   000034 16                    MOVW      HL, AX             ;; 1 cycle
   \   000035 AEF8                  MOVW      AX, SP             ;; 1 cycle
   \   000037 A1                    INCW      AX                 ;; 1 cycle
   \   000038 37                    XCHW      AX, HL             ;; 1 cycle
   \   000039 F1                    CLRB      A                  ;; 1 cycle
   \   00003A 7194                  MOV1      CY, [HL].1         ;; 1 cycle
   \   00003C 6131                  SUBC      A, A               ;; 1 cycle
   \   00003E 74                    MOV       E, A               ;; 1 cycle
   \   00003F 8801                  MOV       A, [SP+0x01]       ;; 1 cycle
   \   000041 616C                  OR        A, E               ;; 1 cycle
   \   000043 6168                  OR        A, X               ;; 1 cycle
   \   000045 616D                  OR        A, D               ;; 1 cycle
   \   000047 616A                  OR        A, C               ;; 1 cycle
   \   000049 616B                  OR        A, B               ;; 1 cycle
   \   00004B 5C01                  AND       A, #0x1            ;; 1 cycle
   \   00004D 6C40                  OR        A, #0x40           ;; 1 cycle
   \   00004F 73                    MOV       B, A               ;; 1 cycle
   \   000050 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000052 FD....                CALL      N:?Subroutine2     ;; 3 cycles
   \   000055                       ; ------------------------------------- Block: 43 cycles
   \                     ??CrossCallReturnLabel_4:
   \   000055 61EA                  CALL      DE                 ;; 3 cycles
    890                  p_gw->iCommAPI->iCommandSend(cValueToSendLow) ;
   \   000057 FBF8FF                MOVW      HL, SP             ;; 1 cycle
   \   00005A A7                    INCW      HL                 ;; 1 cycle
   \   00005B F1                    CLRB      A                  ;; 1 cycle
   \   00005C 71E4                  MOV1      CY, [HL].6         ;; 1 cycle
   \   00005E 61DC                  ROLC      A, 0x1             ;; 1 cycle
   \   000060 6C04                  OR        A, #0x4            ;; 1 cycle
   \   000062 73                    MOV       B, A               ;; 1 cycle
   \   000063 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000065 FD....                CALL      N:?Subroutine2     ;; 3 cycles
   \   000068                       ; ------------------------------------- Block: 14 cycles
    891              }
   \                     ??CrossCallReturnLabel_5:
   \   000068 61EA                  CALL      DE                 ;; 3 cycles
   \   00006A                       ; ------------------------------------- Block: 3 cycles
    892          }
   \                     ??ST7579_SetLine_40:
   \   00006A 1004                  ADDW      SP, #0x4           ;; 1 cycle
   \   00006C C4                    POP       DE                 ;; 1 cycle
   \   00006D C2                    POP       BC                 ;; 1 cycle
   \   00006E D7                    RET                          ;; 6 cycles
   \   00006F                       ; ------------------------------------- Block: 9 cycles
   \   00006F                       ; ------------------------------------- Total: 86 cycles
   \   00006F                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment SWITCH, align 2
   \                     ??ST7579_Write_0:
   \   000000 0100                  DW        1
   \   000002 1500                  DW        21
   \   000004 ....                  DW        ??ST7579_Write_3
   \   000006 ....                  DW        ??ST7579_Write_1
   \   000008 ....                  DW        ??ST7579_Write_4
   \   00000A ....                  DW        ??ST7579_Write_5
   \   00000C ....                  DW        ??ST7579_Write_17
   \   00000E ....                  DW        ??ST7579_Write_7
   \   000010 ....                  DW        ??ST7579_Write_20
   \   000012 ....                  DW        ??ST7579_Write_23
   \   000014 ....                  DW        ??ST7579_Write_3
   \   000016 ....                  DW        ??ST7579_Write_3
   \   000018 ....                  DW        ??ST7579_Write_3
   \   00001A ....                  DW        ??ST7579_Write_3
   \   00001C ....                  DW        ??ST7579_Write_3
   \   00001E ....                  DW        ??ST7579_Write_26
   \   000020 ....                  DW        ??ST7579_Write_27
   \   000022 ....                  DW        ??ST7579_Write_3
   \   000024 ....                  DW        ??ST7579_Write_3
   \   000026 ....                  DW        ??ST7579_Write_3
   \   000028 ....                  DW        ??ST7579_Write_3
   \   00002A ....                  DW        ??ST7579_Write_28
   \   00002C ....                  DW        ??ST7579_Write_29
   \   00002E ....                  DW        ??ST7579_Write_30

   \                                 In  segment SWITCH, align 2
   \                     ??ST7579_Read_0:
   \   000000 0000                  DW        0
   \   000002 1600                  DW        22
   \   000004 ....                  DW        ??ST7579_SetLine_15
   \   000006 ....                  DW        ??ST7579_Read_1
   \   000008 ....                  DW        ??ST7579_Read_2
   \   00000A ....                  DW        ??ST7579_Read_3
   \   00000C ....                  DW        ??ST7579_Read_4
   \   00000E ....                  DW        ??ST7579_SetLine_15
   \   000010 ....                  DW        ??ST7579_SetLine_15
   \   000012 ....                  DW        ??ST7579_SetLine_15
   \   000014 ....                  DW        ??ST7579_SetLine_15
   \   000016 ....                  DW        ??ST7579_Read_5
   \   000018 ....                  DW        ??ST7579_Read_6
   \   00001A ....                  DW        ??ST7579_Read_7
   \   00001C ....                  DW        ??ST7579_Read_8
   \   00001E ....                  DW        ??ST7579_Read_9
   \   000020 ....                  DW        ??ST7579_Read_10
   \   000022 ....                  DW        ??ST7579_Read_11
   \   000024 ....                  DW        ??ST7579_SetLine_15
   \   000026 ....                  DW        ??ST7579_SetLine_15
   \   000028 ....                  DW        ??ST7579_SetLine_15
   \   00002A ....                  DW        ??ST7579_SetLine_15
   \   00002C ....                  DW        ??ST7579_Read_12
   \   00002E ....                  DW        ??ST7579_Read_13
   \   000030 ....                  DW        ??ST7579_Read_14

   \                                 In  segment SWITCH, align 2
   \                     ??ST7579_SetSystemBiasBooster_0:
   \   000000 0000                  DW        0
   \   000002 1200                  DW        18
   \   000004 ....                  DW        ??ST7579_SetSystemBiasBooster_18
   \   000006 ....                  DW        ??ST7579_SetSystemBiasBooster_1
   \   000008 ....                  DW        ??ST7579_SetSystemBiasBooster_4
   \   00000A ....                  DW        ??ST7579_SetSystemBiasBooster_10
   \   00000C ....                  DW        ??ST7579_SetSystemBiasBooster_2
   \   00000E ....                  DW        ??ST7579_SetSystemBiasBooster_5
   \   000010 ....                  DW        ??ST7579_SetSystemBiasBooster_11
   \   000012 ....                  DW        ??ST7579_SetSystemBiasBooster_3
   \   000014 ....                  DW        ??ST7579_SetSystemBiasBooster_6
   \   000016 ....                  DW        ??ST7579_SetSystemBiasBooster_12
   \   000018 ....                  DW        ??ST7579_SetSystemBiasBooster_18
   \   00001A ....                  DW        ??ST7579_SetSystemBiasBooster_7
   \   00001C ....                  DW        ??ST7579_SetSystemBiasBooster_13
   \   00001E ....                  DW        ??ST7579_SetSystemBiasBooster_8
   \   000020 ....                  DW        ??ST7579_SetSystemBiasBooster_14
   \   000022 ....                  DW        ??ST7579_SetSystemBiasBooster_9
   \   000024 ....                  DW        ??ST7579_SetSystemBiasBooster_15
   \   000026 ....                  DW        ??ST7579_SetSystemBiasBooster_16
   \   000028 ....                  DW        ??ST7579_SetSystemBiasBooster_17
    893          
    894          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      0   ST7579_Close
      6   ST7579_Config
        6   -> ST7579_SetChar
        6   -> ST7579_SetFrameRate
        6   -> ST7579_SetPage
        6   -> ST7579_SetSystemBiasBooster
        6   -> ST7579_SetVO_Range
      2   ST7579_Open
        2   -> ST7579_Config
      4   ST7579_Read
      4   ST7579_Send16bitsCommand
        4   -- Indirect call
      2   ST7579_Send8bitsData
        2   -- Indirect call
      4   ST7579_SetChar
        4   -- Indirect call
      4   ST7579_SetFrameRate
        4   -- Indirect call
      8   ST7579_SetLine
        8   -- Indirect call
      4   ST7579_SetPage
        4   -- Indirect call
      8   ST7579_SetSystemBiasBooster
        6   -- Indirect call
      6   ST7579_SetVO_Range
        6   -- Indirect call
     12   ST7579_Write
       12   -- Indirect call
       12   -> ST7579_Send16bitsCommand
       12   -> ST7579_SetChar
       12   -> ST7579_SetFrameRate
       12   -> ST7579_SetLine
       12   -> ST7579_SetPage
       12   -> ST7579_SetSystemBiasBooster
       12   -> ST7579_SetVO_Range


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      50  ??ST7579_Read_0
      42  ??ST7579_SetSystemBiasBooster_0
      48  ??ST7579_Write_0
       8  ??Subroutine16_0
       6  ?Subroutine0
       5  ?Subroutine1
      11  ?Subroutine10
       6  ?Subroutine11
       5  ?Subroutine12
       9  ?Subroutine13
       6  ?Subroutine14
       5  ?Subroutine15
      12  ?Subroutine2
       1  ?Subroutine3
       6  ?Subroutine4
      10  ?Subroutine5
      18  ?Subroutine6
       9  ?Subroutine7
       3  ?Subroutine8
       6  ?Subroutine9
       2  ST7579_Close
      66  ST7579_Config
      83  ST7579_Open
     167  ST7579_Read
      25  ST7579_Send16bitsCommand
      16  ST7579_Send8bitsData
      39  ST7579_SetChar
     110  ST7579_SetFrameRate
     111  ST7579_SetLine
      41  ST7579_SetPage
     154  ST7579_SetSystemBiasBooster
     119  ST7579_SetVO_Range
    1056  ST7579_Write

 
 2 115 bytes in segment CODE
   140 bytes in segment SWITCH
 
 2 115 bytes of CODE  memory
   140 bytes of CONST memory

Errors: none
Warnings: none
