###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.5.50715 for RL78             05/Aug/2014  14:51:07 #
# Copyright 2011-2013 IAR Systems AB.                                         #
# Evaluation license - IAR Embedded Workbench for Renesas RL78, Evaluation version 1.30 #
#                                                                             #
#    Core         =  rl78_2                                                   #
#    Code model   =  Near                                                     #
#    Data model   =  Near                                                     #
#                 =                                                           #
#    Source file  =  D:\NCSU\Research Work\Summer                             #
#                    2014\GainSpan-WiFi\WiFi_Demo\SerialDemo-G14_SPI\SerialDe #
#                    mo-G14 - Copy\user_src\RDKRL78_spi.c                     #
#    Command line =  "D:\NCSU\Research Work\Summer                            #
#                    2014\GainSpan-WiFi\WiFi_Demo\SerialDemo-G14_SPI\SerialDe #
#                    mo-G14 - Copy\user_src\RDKRL78_spi.c" --core rl78_2      #
#                    --code_model near --data_model near                      #
#                    --near_const_location rom0 -o "D:\NCSU\Research          #
#                    Work\Summer 2014\GainSpan-WiFi\WiFi_Demo\SerialDemo-G14_ #
#                    SPI\SerialDemo-G14 - Copy\Debug\Obj\" --dlib_config      #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.5\rl78\LIB\dlrl78nn2n.h" -e -Ohz --no_scheduling       #
#                    --debug -lCN "D:\NCSU\Research Work\Summer               #
#                    2014\GainSpan-WiFi\WiFi_Demo\SerialDemo-G14_SPI\SerialDe #
#                    mo-G14 - Copy\Debug\List\" -I "D:\NCSU\Research          #
#                    Work\Summer 2014\GainSpan-WiFi\WiFi_Demo\SerialDemo-G14_ #
#                    SPI\SerialDemo-G14 - Copy/applilet3_src/\" -I            #
#                    "D:\NCSU\Research Work\Summer                            #
#                    2014\GainSpan-WiFi\WiFi_Demo\SerialDemo-G14_SPI\SerialDe #
#                    mo-G14 - Copy/Glyph/\" -I "D:\NCSU\Research Work\Summer  #
#                    2014\GainSpan-WiFi\WiFi_Demo\SerialDemo-G14_SPI\SerialDe #
#                    mo-G14 - Copy/Glyph/Drivers/\" -I "D:\NCSU\Research      #
#                    Work\Summer 2014\GainSpan-WiFi\WiFi_Demo\SerialDemo-G14_ #
#                    SPI\SerialDemo-G14 - Copy/user_include/\"                #
#    List file    =  D:\NCSU\Research Work\Summer                             #
#                    2014\GainSpan-WiFi\WiFi_Demo\SerialDemo-G14_SPI\SerialDe #
#                    mo-G14 - Copy\Debug\List\RDKRL78_spi.lst                 #
#    Object file  =  D:\NCSU\Research Work\Summer                             #
#                    2014\GainSpan-WiFi\WiFi_Demo\SerialDemo-G14_SPI\SerialDe #
#                    mo-G14 - Copy\Debug\Obj\RDKRL78_spi.r87                  #
#                                                                             #
#                                                                             #
###############################################################################

D:\NCSU\Research Work\Summer 2014\GainSpan-WiFi\WiFi_Demo\SerialDemo-G14_SPI\SerialDemo-G14 - Copy\user_src\RDKRL78_spi.c
      1          // RDKRL78_spi.c
      2          #include <stdbool.h>
      3          #include "r_cg_macrodriver.h"

   \                                 In  segment SADDR_A, at 0xfff05
   \   union <unnamed> volatile __saddr _A_P5
   \                     _A_P5:
   \   000000                       DS 1

   \                                 In  segment SADDR_A, at 0xfff08
   \   union <unnamed> volatile __saddr _A_P8
   \                     _A_P8:
   \   000000                       DS 1

   \                                 In  segment SADDR_A, at 0xfff0d
   \   union <unnamed> volatile __saddr _A_P13
   \                     _A_P13:
   \   000000                       DS 1

   \                                 In  segment SADDR_A, at 0xfff0e
   \   union <unnamed> volatile __saddr _A_P14
   \                     _A_P14:
   \   000000                       DS 1

   \                                 In  segment SADDR_A, at 0xfff16
   \   union <unnamed> volatile __saddr __no_bit_access _A_SDR13
   \                     _A_SDR13:
   \   000000                       DS 2

   \                                 In  segment NEAR_A, at 0xfff2e
   \   union <unnamed> volatile __sfr _A_PM14
   \                     _A_PM14:
   \   000000                       DS 1

   \                                 In  segment NEAR_A, at 0xf0076
   \   union <unnamed> volatile __no_bit_access _A_ADPC
   \                     _A_ADPC:
   \   000000                       DS 1

   \                                 In  segment NEAR_A, at 0xf0166
   \   union <unnamed> volatile __no_bit_access _A_SPS1
   \                     _A_SPS1:
   \   000000                       DS 2
      4          #include "r_cg_userdefine.h"
      5          #include "r_cg_serial.h"
      6          #include "r_cg_it.h"
      7          #include "RDKRL78_spi.h"
      8          #include "WIFIApi.h"
      9          
     10          extern volatile uint8_t G_SPI21_SendingData; //spi busy flag
     11          extern volatile uint8_t G_SPI21_ReceivingData; //spi busy flag
     12          
     13          extern volatile uint8_t G_SPI31_SendingData; //spi busy flag
     14          extern volatile uint8_t G_SPI31_ReceivingData; //spi busy flag
     15          
     16          extern uint8_t  G_WIFI_ReceiveBuffer;
     17          extern uint32_t G_WIFI_BufferIndex;
     18          
     19          uint8_t WIFI_ReceiveByte(char*);
     20          
     21          
     22          

   \                                 In  segment NEAR_I, align 2, align-sorted
     23          unsigned char *SPI_CS_Port[] = {
   \                     SPI_CS_Port:
   \   000000                       DS 10
   \   00000A                       REQUIRE `?<Initializer for SPI_CS_Port>`
   \   00000A                       REQUIRE __INIT_NEAR_I
     24              (unsigned char *)&P8,   // EINK-CS#       P80
     25              (unsigned char *)&P14,  // SD-CS          P142
     26              (unsigned char *)&P14,  // LCD-CS         P145
     27              (unsigned char *)&P8,   // PMOD2-CS       P83
     28              (unsigned char *)&P5    // WIFI-CS        P55
     29          };
     30          

   \                                 In  segment NEAR_I, align 2, align-sorted
     31          uint8_t SPI_CS_Pin[] = {
   \                     SPI_CS_Pin:
   \   000000                       DS 6
   \   000006                       REQUIRE `?<Initializer for SPI_CS_Pin>`
   \   000006                       REQUIRE __INIT_NEAR_I
     32              0,   // EINK-CS#       P80
     33              2,   // SD-CS          P142
     34              5,   // LCD-CS         P145
     35              3,   // PMOD2-CS       P83
     36              5    // WIFI-CS        P55
     37          };
     38          
     39          
     40          /*---------------------------------------------------------------------------*
     41           * Routine:  SPI_SetBitRate
     42           *---------------------------------------------------------------------------*
     43           * Description:
     44           *      Set the I2C speed in kHz.
     45           * Inputs:
     46           *      uint16_t aSpeed -- kHz speed of I2C bus.
     47           * Outputs:
     48           *      void
     49           *---------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 1, keep-with-next
     50          void SPI_SetBitRate(uint32_t bitsPerSecond)
   \                     SPI_SetBitRate:
     51          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001                       ; Auto size: 0
     52              uint16_t fCLK_devisor;
     53              uint32_t baud_devisor;
     54              
     55              /*  Calculate division ratio of the operation clock to be stored in bits 15:9 
     56              of the SDRmn register. */
     57              
     58              baud_devisor = ((RL78_MAIN_SYSTEM_CLOCK / bitsPerSecond / 2) - 1);
   \   000001 14                    MOVW      DE, AX             ;; 1 cycle
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003 C6                    POP       HL                 ;; 1 cycle
   \   000004 30001B                MOVW      AX, #0x1B00        ;; 1 cycle
   \   000007 32B700                MOVW      BC, #0xB7          ;; 1 cycle
   \   00000A CEFB0B                DIVWU                        ;; 17 cycles
   \   00000D FD....                CALL      N:?Subroutine3     ;; 3 cycles
   \   000010                       ; ------------------------------------- Block: 26 cycles
   \                     ??CrossCallReturnLabel_4:
   \   000010 240100                SUBW      AX, #0x1           ;; 1 cycle
   \   000013 61D8                  SKNC
   \   000015 B3                    DECW      BC                 ;; 5 cycles
     59              
     60              /* increase the fCLK devisor each time the baud rate is divided until it fits */
     61              for(fCLK_devisor = 0; fCLK_devisor<12; fCLK_devisor++)
   \   000016 360000                MOVW      HL, #0x0           ;; 1 cycle
   \   000019                       ; ------------------------------------- Block: 7 cycles
     62              {
     63                  /* check if baud_devisor is greater than 7 bits */
     64                  if(baud_devisor > 127)
   \                     ??SPI_SetBitRate_0:
   \   000019 33                    XCHW      AX, BC             ;; 1 cycle
   \   00001A 440000                CMPW      AX, #0x0           ;; 1 cycle
   \   00001D 33                    XCHW      AX, BC             ;; 1 cycle
   \   00001E 61F8                  SKNZ                         ;; 4 cycles
   \   000020                       ; ------------------------------------- Block: 7 cycles
   \   000020 448000                CMPW      AX, #0x80          ;; 1 cycle
   \   000023                       ; ------------------------------------- Block: 1 cycles
   \                     ??SPI_SetBitRate_1:
   \   000023 DC0D                  BC        ??SPI_SendReceive_0  ;; 4 cycles
   \   000025                       ; ------------------------------------- Block: 4 cycles
     65                  {
     66                      baud_devisor = baud_devisor/2;
   \   000025 FD....                CALL      N:?Subroutine3     ;; 3 cycles
   \   000028                       ; ------------------------------------- Block: 3 cycles
     67                  }
   \                     ??CrossCallReturnLabel_5:
   \   000028 A7                    INCW      HL                 ;; 1 cycle
   \   000029 37                    XCHW      AX, HL             ;; 1 cycle
   \   00002A 440C00                CMPW      AX, #0xC           ;; 1 cycle
   \   00002D 37                    XCHW      AX, HL             ;; 1 cycle
   \   00002E DE10                  BNC       ??SPI_SendReceive_1  ;; 4 cycles
   \   000030                       ; ------------------------------------- Block: 8 cycles
   \   000030 EFE7                  BR        S:??SPI_SetBitRate_0  ;; 3 cycles
   \   000032                       ; ------------------------------------- Block: 3 cycles
     68                  else
     69                  {
     70                      SPS1  = fCLK_devisor & 0xF;   /* Serial clock select register */
   \                     ??SPI_SendReceive_0:
   \   000032 37                    XCHW      AX, HL             ;; 1 cycle
   \   000033 60                    MOV       A, X               ;; 1 cycle
   \   000034 F0                    CLRB      X                  ;; 1 cycle
   \   000035 5C0F                  AND       A, #0xF            ;; 1 cycle
   \   000037 08                    XCH       A, X               ;; 1 cycle
   \   000038 BF6601                MOVW      0x166, AX          ;; 1 cycle
   \   00003B 17                    MOVW      AX, HL             ;; 1 cycle
     71                      SDR13 = baud_devisor<<9;
   \   00003C 319D                  SHLW      AX, 0x9            ;; 1 cycle
   \   00003E BD16                  MOVW      S:0xFFF16, AX      ;; 1 cycle
     72                      break;
   \   000040                       ; ------------------------------------- Block: 9 cycles
     73                  }
     74              }
     75          }
   \                     ??SPI_SendReceive_1:
   \   000040 C4                    POP       DE                 ;; 1 cycle
   \   000041 D7                    RET                          ;; 6 cycles
   \   000042                       ; ------------------------------------- Block: 7 cycles
   \   000042                       ; ------------------------------------- Total: 75 cycles
   \   000042                       REQUIRE ?CLRL78_V1_0_L00
   \   000042                       REQUIRE _A_SPS1
   \   000042                       REQUIRE _A_SDR13

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000 311E                  SHRW      AX, 0x1            ;; 1 cycle
   \   000002 33                    XCHW      AX, BC             ;; 1 cycle
   \   000003 311E                  SHRW      AX, 0x1            ;; 1 cycle
   \   000005 33                    XCHW      AX, BC             ;; 1 cycle
   \   000006 71F9                  MOV1      A.7, CY            ;; 1 cycle
   \   000008 D7                    RET                          ;; 6 cycles
   \   000009                       ; ------------------------------------- Block: 11 cycles
   \   000009                       ; ------------------------------------- Total: 11 cycles
   \   000009                       REQUIRE ?CLRL78_V1_0_L00
     76          
     77          

   \                                 In  segment CODE, align 1, keep-with-next
     78          void ConfigureOutputPorts(void)
   \                     ConfigureOutputPorts:
     79          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
     80              /* Set Initial Output Value */
     81              P14 = 0xDF; /* LCD_CS 0xFE */   /*G14 -> P145  */
   \   000000 CD0EDF                MOV       S:0xFFF0E, #0xDF   ;; 1 cycle
     82              /* Set Output Port Modes */
     83              PM14 = 0xDF; /* LCD CS 0xFE */   /*G14 -> P145 */
   \   000003 CE2EDF                MOV       0xFFF2E, #0xDF     ;; 1 cycle
     84              ADPC = 0x01; /* GV: Fixes LED12 issue */
   \   000006 CF760001              MOV       0x76, #0x1         ;; 1 cycle
     85          }
   \   00000A D7                    RET                          ;; 6 cycles
   \   00000B                       ; ------------------------------------- Block: 9 cycles
   \   00000B                       ; ------------------------------------- Total: 9 cycles
   \   00000B                       REQUIRE ?CLRL78_V1_0_L00
   \   00000B                       REQUIRE _A_P14
   \   00000B                       REQUIRE _A_PM14
   \   00000B                       REQUIRE _A_ADPC
     86          
     87          

   \                                 In  segment CODE, align 1, keep-with-next
     88          void SPI_Init()
   \                     SPI_Init:
     89          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001                       ; Auto size: 0
     90              IO_Reset();
   \   000001 FD....                CALL      IO_Reset           ;; 3 cycles
     91           //   ConfigureOutputPorts();
     92              LCD_CREATE();
   \   000004 FD....                CALL      R_CSI21_Create     ;; 3 cycles
     93              WIFI_CREATE();
   \   000007 FD....                CALL      R_CSI31_Create     ;; 3 cycles
     94              SPI_SetBitRate(11500);
   \   00000A 30EC2C                MOVW      AX, #0x2CEC        ;; 1 cycle
   \   00000D F7                    CLRW      BC                 ;; 1 cycle
   \   00000E FD....                CALL      SPI_SetBitRate     ;; 3 cycles
     95              LCD_START();
   \   000011 FD....                CALL      R_CSI21_Start      ;; 3 cycles
     96              WIFI_START();
   \   000014 FD....                CALL      R_CSI31_Start      ;; 3 cycles
     97          }
   \   000017 C2                    POP       BC                 ;; 1 cycle
   \   000018 D7                    RET                          ;; 6 cycles
   \   000019                       ; ------------------------------------- Block: 28 cycles
   \   000019                       ; ------------------------------------- Total: 28 cycles
   \   000019                       REQUIRE ?CLRL78_V1_0_L00
     98          

   \                                 In  segment CODE, align 1, keep-with-next
     99          void IO_Reset()
   \                     IO_Reset:
    100          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 2
   \   000000 C1                    PUSH      AX                 ;; 1 cycle
    101              volatile int i = 0;
   \   000001 F6                    CLRW      AX                 ;; 1 cycle
   \   000002 B800                  MOVW      [SP], AX           ;; 1 cycle
    102              
    103          		//#warning RESET-IO must be inverted for actual HW
    104          		RESET_IO_PORT |= (1<<RESET_IO_BIT_POS);
   \   000004 71020D                SET1      S:0xFFF0D.0        ;; 2 cycles
    105          		// P13 |= (1<<0); // Assert #RESET-IO
    106              for (i=0;i<10000;i++)
   \   000007 EF03                  BR        S:??SPI_SendReceive_2  ;; 3 cycles
   \   000009                       ; ------------------------------------- Block: 8 cycles
   \                     ??IO_Reset_0:
   \   000009 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00000B A1                    INCW      AX                 ;; 1 cycle
   \   00000C                       ; ------------------------------------- Block: 2 cycles
   \                     ??SPI_SendReceive_2:
   \   00000C B800                  MOVW      [SP], AX           ;; 1 cycle
   \   00000E A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000010 7C80                  XOR       A, #0x80           ;; 1 cycle
   \   000012 4410A7                CMPW      AX, #0xA710        ;; 1 cycle
   \   000015 DCF2                  BC        ??IO_Reset_0       ;; 4 cycles
   \   000017                       ; ------------------------------------- Block: 8 cycles
    107          			;
    108          		RESET_IO_PORT &= !(1<<RESET_IO_BIT_POS);
   \   000017 8D0D                  MOV       A, S:0xFFF0D       ;; 1 cycle
   \   000019 F40D                  CLRB      S:0xFFF0D          ;; 1 cycle
    109          		//    P13 &= ~(1<<0);  // Deassert #RESET-IO
    110              for (i=0;i<10000;i++)
   \   00001B F6                    CLRW      AX                 ;; 1 cycle
   \   00001C EF03                  BR        S:??SPI_SendReceive_3  ;; 3 cycles
   \   00001E                       ; ------------------------------------- Block: 6 cycles
   \                     ??IO_Reset_1:
   \   00001E A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000020 A1                    INCW      AX                 ;; 1 cycle
   \   000021                       ; ------------------------------------- Block: 2 cycles
   \                     ??SPI_SendReceive_3:
   \   000021 B800                  MOVW      [SP], AX           ;; 1 cycle
   \   000023 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000025 7C80                  XOR       A, #0x80           ;; 1 cycle
   \   000027 4410A7                CMPW      AX, #0xA710        ;; 1 cycle
   \   00002A DCF2                  BC        ??IO_Reset_1       ;; 4 cycles
   \   00002C                       ; ------------------------------------- Block: 8 cycles
    111          			;
    112          }
   \   00002C 1002                  ADDW      SP, #0x2           ;; 1 cycle
   \   00002E D7                    RET                          ;; 6 cycles
   \   00002F                       ; ------------------------------------- Block: 7 cycles
   \   00002F                       ; ------------------------------------- Total: 41 cycles
   \   00002F                       REQUIRE ?CLRL78_V1_0_L00
   \   00002F                       REQUIRE _A_P13
    113          

   \                                 In  segment CODE, align 1, keep-with-next
    114          void SPI_CS_Start(uint8_t aDevice)
   \                     SPI_CS_Start:
    115          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001                       ; Auto size: 0
   \   000001 FD....                CALL      N:?Subroutine1     ;; 3 cycles
   \   000004                       ; ------------------------------------- Block: 4 cycles
    116          	*SPI_CS_Port[aDevice] &= ~(1<<SPI_CS_Pin[aDevice]);
   \                     ??CrossCallReturnLabel_0:
   \   000004 7CFF                  XOR       A, #0xFF           ;; 1 cycle
   \   000006 FD....                CALL      N:?Subroutine2     ;; 3 cycles
   \   000009                       ; ------------------------------------- Block: 4 cycles
   \                     ??CrossCallReturnLabel_2:
   \   000009 5D                    AND       A, [HL]            ;; 1 cycle
   \   00000A 9B                    MOV       [HL], A            ;; 1 cycle
    117          }
   \   00000B C2                    POP       BC                 ;; 1 cycle
   \   00000C D7                    RET                          ;; 6 cycles
   \   00000D                       ; ------------------------------------- Block: 9 cycles
   \   00000D                       ; ------------------------------------- Total: 17 cycles
   \   00000D                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000 73                    MOV       B, A               ;; 1 cycle
   \   000001 F1                    CLRB      A                  ;; 1 cycle
   \   000002 01                    ADDW      AX, AX             ;; 1 cycle
   \   000003 04....                ADDW      AX, #SPI_CS_Port   ;; 1 cycle
   \   000006 16                    MOVW      HL, AX             ;; 1 cycle
   \   000007 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000008 16                    MOVW      HL, AX             ;; 1 cycle
   \   000009 63                    MOV       A, B               ;; 1 cycle
   \   00000A D7                    RET                          ;; 6 cycles
   \   00000B                       ; ------------------------------------- Block: 14 cycles
   \   00000B                       ; ------------------------------------- Total: 14 cycles
   \   00000B                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000 70                    MOV       X, A               ;; 1 cycle
   \   000001 73                    MOV       B, A               ;; 1 cycle
   \   000002 09....                MOV       A, (SPI_CS_Pin & 0xFFFF)[B]  ;; 1 cycle
   \   000005 72                    MOV       C, A               ;; 1 cycle
   \   000006 360100                MOVW      HL, #0x1           ;; 1 cycle
   \   000009 37                    XCHW      AX, HL             ;; 1 cycle
   \   00000A FD....                CALL      N:?I_LSH_L02       ;; 3 cycles
   \   00000D 37                    XCHW      AX, HL             ;; 1 cycle
   \   00000E 66                    MOV       A, L               ;; 1 cycle
   \   00000F D7                    RET                          ;; 6 cycles
   \   000010                       ; ------------------------------------- Block: 17 cycles
   \   000010                       ; ------------------------------------- Total: 17 cycles
   \   000010                       REQUIRE ?CLRL78_V1_0_L00
    118          

   \                                 In  segment CODE, align 1, keep-with-next
    119          void SPI_CS_End(uint8_t aDevice)
   \                     SPI_CS_End:
    120          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001                       ; Auto size: 0
   \   000001 FD....                CALL      N:?Subroutine1     ;; 3 cycles
   \   000004                       ; ------------------------------------- Block: 4 cycles
    121          	*SPI_CS_Port[aDevice] |= (1<<SPI_CS_Pin[aDevice]);
   \                     ??CrossCallReturnLabel_1:
   \   000004 FD....                CALL      N:?Subroutine2     ;; 3 cycles
   \   000007                       ; ------------------------------------- Block: 3 cycles
   \                     ??CrossCallReturnLabel_3:
   \   000007 6D                    OR        A, [HL]            ;; 1 cycle
   \   000008 9B                    MOV       [HL], A            ;; 1 cycle
    122          }
   \   000009 C2                    POP       BC                 ;; 1 cycle
   \   00000A D7                    RET                          ;; 6 cycles
   \   00000B                       ; ------------------------------------- Block: 9 cycles
   \   00000B                       ; ------------------------------------- Total: 16 cycles
   \   00000B                       REQUIRE ?CLRL78_V1_0_L00
    123          

   \                                 In  segment CODE, align 1, keep-with-next
    124          void SPI_Send(uint8_t aDevice, uint8_t *aData, uint32_t aLength)
   \                     SPI_Send:
    125          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 4
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001 C3                    PUSH      BC                 ;; 1 cycle
   \   000002 C1                    PUSH      AX                 ;; 1 cycle
   \   000003                       ; Auto size: 8
   \   000003 2004                  SUBW      SP, #0x4           ;; 1 cycle
    126          		volatile uint16_t d;
    127          
    128              uint8_t noRXData;	
    129          		SPI_CS_Start(aDevice);
   \   000005 FD....                CALL      SPI_CS_Start       ;; 3 cycles
    130          
    131          		for (d=100; d>0; d--) // delay
   \   000008 306400                MOVW      AX, #0x64          ;; 1 cycle
   \   00000B EF03                  BR        S:??SPI_SendReceive_4  ;; 3 cycles
   \   00000D                       ; ------------------------------------- Block: 11 cycles
   \                     ??SPI_Send_0:
   \   00000D A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00000F B1                    DECW      AX                 ;; 1 cycle
   \   000010                       ; ------------------------------------- Block: 2 cycles
   \                     ??SPI_SendReceive_4:
   \   000010 B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
   \   000012 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000014 F7                    CLRW      BC                 ;; 1 cycle
   \   000015 43                    CMPW      AX, BC             ;; 1 cycle
   \   000016 DFF5                  BNZ       ??SPI_Send_0       ;; 4 cycles
   \   000018                       ; ------------------------------------- Block: 8 cycles
    132          			;
    133          
    134              switch(aDevice)
   \   000018 8805                  MOV       A, [SP+0x05]       ;; 1 cycle
   \   00001A 2C02                  SUB       A, #0x2            ;; 1 cycle
   \   00001C DD06                  BZ        ??SPI_SendReceive_5  ;; 4 cycles
   \   00001E                       ; ------------------------------------- Block: 6 cycles
   \   00001E 2C02                  SUB       A, #0x2            ;; 1 cycle
   \   000020 DD1A                  BZ        ??SPI_SendReceive_6  ;; 4 cycles
   \   000022                       ; ------------------------------------- Block: 5 cycles
   \   000022 EF2E                  BR        S:??SPI_SendReceive_7  ;; 3 cycles
   \   000024                       ; ------------------------------------- Block: 3 cycles
    135              {
    136                case SPI_LCD  :
    137                          G_SPI21_SendingData = 1;
   \                     ??SPI_SendReceive_5:
   \   000024 E5....                ONEB      N:G_SPI21_SendingData  ;; 1 cycle
    138          		G_SPI21_ReceivingData = 0;
   \   000027 F5....                CLRB      N:G_SPI21_ReceivingData  ;; 1 cycle
    139                          LCD_SEND_RECEIVE(aData, aLength, &noRXData);  
   \   00002A EBF8FF                MOVW      DE, SP             ;; 1 cycle
   \   00002D A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   00002F 12                    MOVW      BC, AX             ;; 1 cycle
   \   000030 A806                  MOVW      AX, [SP+0x06]      ;; 1 cycle
   \   000032 FD....                CALL      R_CSI21_Send_Receive  ;; 3 cycles
   \   000035                       ; ------------------------------------- Block: 9 cycles
    140                          while(G_SPI21_SendingData);
   \                     ??SPI_Send_1:
   \   000035 D5....                CMP0      N:G_SPI21_SendingData  ;; 1 cycle
   \   000038 DD18                  BZ        ??SPI_SendReceive_7  ;; 4 cycles
   \   00003A                       ; ------------------------------------- Block: 5 cycles
   \   00003A EFF9                  BR        S:??SPI_Send_1     ;; 3 cycles
   \   00003C                       ; ------------------------------------- Block: 3 cycles
    141                          break;
    142                case SPI_WIFI :
    143                          G_SPI31_SendingData = 1;
   \                     ??SPI_SendReceive_6:
   \   00003C E5....                ONEB      N:G_SPI31_SendingData  ;; 1 cycle
    144          		G_SPI31_ReceivingData = 0;
   \   00003F F5....                CLRB      N:G_SPI31_ReceivingData  ;; 1 cycle
    145                          WIFI_SEND_RECEIVE(aData, aLength, &noRXData);  
   \   000042 EBF8FF                MOVW      DE, SP             ;; 1 cycle
   \   000045 A80E                  MOVW      AX, [SP+0x0E]      ;; 1 cycle
   \   000047 12                    MOVW      BC, AX             ;; 1 cycle
   \   000048 A806                  MOVW      AX, [SP+0x06]      ;; 1 cycle
   \   00004A FD....                CALL      R_CSI31_Send_Receive  ;; 3 cycles
   \   00004D                       ; ------------------------------------- Block: 9 cycles
    146                          while(G_SPI31_SendingData);
   \                     ??SPI_Send_2:
   \   00004D D5....                CMP0      N:G_SPI31_SendingData  ;; 1 cycle
   \   000050 DFFB                  BNZ       ??SPI_Send_2       ;; 4 cycles
   \   000052                       ; ------------------------------------- Block: 5 cycles
    147                          break;
    148              }
    149             
    150              
    151              SPI_CS_End(aDevice);
   \                     ??SPI_SendReceive_7:
   \   000052 8805                  MOV       A, [SP+0x05]       ;; 1 cycle
   \   000054 FD....                CALL      SPI_CS_End         ;; 3 cycles
    152          }
   \   000057 1008                  ADDW      SP, #0x8           ;; 1 cycle
   \   000059 C4                    POP       DE                 ;; 1 cycle
   \   00005A                       ; ------------------------------------- Block: 6 cycles
   \   00005A                       ; ------------------------------------- Total: 72 cycles
   \   00005A                       REQUIRE ?CLRL78_V1_0_L00
   \   00005A                       REQUIRE ?Subroutine0
   \   00005A                       ; // Fall through to label ?Subroutine0

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 FD....                CALL      N:?FUNC_LEAVE_L06
   \   000003 0400                  DW        0x4                ;; 3 cycles
   \   000005                       ; ------------------------------------- Block: 3 cycles
   \   000005                       ; ------------------------------------- Total: 3 cycles
   \   000005                       REQUIRE ?CLRL78_V1_0_L00
    153          

   \                                 In  segment CODE, align 1, keep-with-next
    154          void SPI_SendReceive(uint8_t aDevice, uint8_t *aTXData, uint32_t aTXLength, uint8_t *aRXData)
   \                     SPI_SendReceive:
    155          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 4
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 C1                    PUSH      AX                 ;; 1 cycle
   \   000002                       ; Auto size: 6
   \   000002 C1                    PUSH      AX                 ;; 1 cycle
    156          		volatile uint16_t d;
    157               SPI_CS_Start(aDevice);
   \   000003 FD....                CALL      SPI_CS_Start       ;; 3 cycles
    158          	
    159          		for (d=100; d>0; d--) // delay
   \   000006 306400                MOVW      AX, #0x64          ;; 1 cycle
   \   000009 EF03                  BR        S:??SPI_SendReceive_8  ;; 3 cycles
   \   00000B                       ; ------------------------------------- Block: 10 cycles
   \                     ??SPI_SendReceive_9:
   \   00000B A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00000D B1                    DECW      AX                 ;; 1 cycle
   \   00000E                       ; ------------------------------------- Block: 2 cycles
   \                     ??SPI_SendReceive_8:
   \   00000E B800                  MOVW      [SP], AX           ;; 1 cycle
   \   000010 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000012 F7                    CLRW      BC                 ;; 1 cycle
   \   000013 43                    CMPW      AX, BC             ;; 1 cycle
   \   000014 DFF5                  BNZ       ??SPI_SendReceive_9  ;; 4 cycles
   \   000016                       ; ------------------------------------- Block: 8 cycles
    160          			;
    161              switch(aDevice)
   \   000016 8803                  MOV       A, [SP+0x03]       ;; 1 cycle
   \   000018 2C02                  SUB       A, #0x2            ;; 1 cycle
   \   00001A DD06                  BZ        ??SPI_SendReceive_10  ;; 4 cycles
   \   00001C                       ; ------------------------------------- Block: 6 cycles
   \   00001C 2C02                  SUB       A, #0x2            ;; 1 cycle
   \   00001E DD1C                  BZ        ??SPI_SendReceive_11  ;; 4 cycles
   \   000020                       ; ------------------------------------- Block: 5 cycles
   \   000020 EF32                  BR        S:??SPI_SendReceive_12  ;; 3 cycles
   \   000022                       ; ------------------------------------- Block: 3 cycles
    162              {
    163                case SPI_LCD  :
    164                          G_SPI21_SendingData = 1;
   \                     ??SPI_SendReceive_10:
   \   000022 E5....                ONEB      N:G_SPI21_SendingData  ;; 1 cycle
    165          		G_SPI21_ReceivingData = 1;
   \   000025 E5....                ONEB      N:G_SPI21_ReceivingData  ;; 1 cycle
    166                          LCD_SEND_RECEIVE(aTXData, aTXLength, aRXData);  
   \   000028 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   00002A 12                    MOVW      BC, AX             ;; 1 cycle
   \   00002B A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   00002D FD....                CALL      R_CSI21_Send_Receive  ;; 3 cycles
   \   000030                       ; ------------------------------------- Block: 8 cycles
    167                          while(G_SPI21_SendingData || G_SPI21_ReceivingData);
   \                     ??SPI_SendReceive_13:
   \   000030 D5....                CMP0      N:G_SPI21_SendingData  ;; 1 cycle
   \   000033 DFFB                  BNZ       ??SPI_SendReceive_13  ;; 4 cycles
   \   000035                       ; ------------------------------------- Block: 5 cycles
   \   000035 D5....                CMP0      N:G_SPI21_ReceivingData  ;; 1 cycle
   \   000038 DFF6                  BNZ       ??SPI_SendReceive_13  ;; 4 cycles
   \   00003A                       ; ------------------------------------- Block: 5 cycles
   \   00003A EF18                  BR        S:??SPI_SendReceive_12  ;; 3 cycles
   \   00003C                       ; ------------------------------------- Block: 3 cycles
    168                          break;
    169                case SPI_WIFI :
    170                          G_SPI31_SendingData = 1;
   \                     ??SPI_SendReceive_11:
   \   00003C E5....                ONEB      N:G_SPI31_SendingData  ;; 1 cycle
    171          		G_SPI31_ReceivingData = 1;
   \   00003F E5....                ONEB      N:G_SPI31_ReceivingData  ;; 1 cycle
    172                          WIFI_SEND_RECEIVE(aTXData, aTXLength, aRXData);  
   \   000042 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   000044 12                    MOVW      BC, AX             ;; 1 cycle
   \   000045 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000047 FD....                CALL      R_CSI31_Send_Receive  ;; 3 cycles
   \   00004A                       ; ------------------------------------- Block: 8 cycles
    173                          while(G_SPI31_SendingData || G_SPI31_ReceivingData);
   \                     ??SPI_SendReceive_14:
   \   00004A D5....                CMP0      N:G_SPI31_SendingData  ;; 1 cycle
   \   00004D DFFB                  BNZ       ??SPI_SendReceive_14  ;; 4 cycles
   \   00004F                       ; ------------------------------------- Block: 5 cycles
   \   00004F D5....                CMP0      N:G_SPI31_ReceivingData  ;; 1 cycle
   \   000052 DFF6                  BNZ       ??SPI_SendReceive_14  ;; 4 cycles
   \   000054                       ; ------------------------------------- Block: 5 cycles
    174                          break;
    175              }
    176              SPI_CS_End(aDevice);
   \                     ??SPI_SendReceive_12:
   \   000054 8803                  MOV       A, [SP+0x03]       ;; 1 cycle
   \   000056 FD....                CALL      SPI_CS_End         ;; 3 cycles
    177          }
   \   000059 1006                  ADDW      SP, #0x6           ;; 1 cycle
   \   00005B ED....                BR        N:?Subroutine0     ;; 3 cycles
   \   00005E                       ; ------------------------------------- Block: 8 cycles
   \   00005E                       ; ------------------------------------- Total: 81 cycles
   \   00005E                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment NEAR_ID, align 2, align-sorted
   \                     `?<Initializer for SPI_CS_Port>`:
   \   000000 ............          DW _A_P8, _A_P14, _A_P14, _A_P8, _A_P5

   \                                 In  segment NEAR_ID, align 2, align-sorted
   \                     `?<Initializer for SPI_CS_Pin>`:
   \   000000 000205030500          DB 0, 2, 5, 3, 5, 0
    178          
    179          
    180                         

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      0   ConfigureOutputPorts
      2   IO_Reset
      2   SPI_CS_End
      2   SPI_CS_Start
      2   SPI_Init
        2   -> IO_Reset
        2   -> R_CSI21_Create
        2   -> R_CSI21_Start
        2   -> R_CSI31_Create
        2   -> R_CSI31_Start
        2   -> SPI_SetBitRate
     14   SPI_Send
       10   -> R_CSI21_Send_Receive
       10   -> R_CSI31_Send_Receive
       10   -> SPI_CS_End
       10   -> SPI_CS_Start
     10   SPI_SendReceive
        6   -> R_CSI21_Send_Receive
        6   -> R_CSI31_Send_Receive
        6   -> SPI_CS_End
        6   -> SPI_CS_Start
      2   SPI_SetBitRate


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ?<Initializer for SPI_CS_Pin>
      10  ?<Initializer for SPI_CS_Port>
       5  ?Subroutine0
      16  ?Subroutine1
      11  ?Subroutine2
       9  ?Subroutine3
      11  ConfigureOutputPorts
      47  IO_Reset
      11  SPI_CS_End
       6  SPI_CS_Pin
      10  SPI_CS_Port
      13  SPI_CS_Start
      25  SPI_Init
      90  SPI_Send
      94  SPI_SendReceive
      66  SPI_SetBitRate
       1  _A_ADPC
       1  _A_P13
       1  _A_P14
       1  _A_P5
       1  _A_P8
       1  _A_PM14
       2  _A_SDR13
       2  _A_SPS1

 
 398 bytes in segment CODE
   4 bytes in segment NEAR_A
  16 bytes in segment NEAR_I
  16 bytes in segment NEAR_ID
   6 bytes in segment SADDR_A
 
 398 bytes of CODE  memory
  16 bytes of CONST memory
  16 bytes of DATA  memory (+ 10 bytes shared)

Errors: none
Warnings: none
